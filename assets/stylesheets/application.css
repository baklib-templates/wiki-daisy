/*! tailwindcss v4.1.14 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-red-500: oklch(63.7% 0.237 25.331);
    --color-slate-50: oklch(98.4% 0.003 247.858);
    --color-slate-200: oklch(92.9% 0.013 255.508);
    --color-slate-300: oklch(86.9% 0.022 252.894);
    --color-slate-400: oklch(70.4% 0.04 256.788);
    --color-slate-500: oklch(55.4% 0.046 257.417);
    --color-slate-600: oklch(44.6% 0.043 257.281);
    --color-slate-700: oklch(37.2% 0.044 257.287);
    --color-slate-800: oklch(27.9% 0.041 260.031);
    --color-slate-900: oklch(20.8% 0.042 265.755);
    --color-gray-50: oklch(98.5% 0.002 247.839);
    --color-gray-200: oklch(92.8% 0.006 264.531);
    --color-gray-300: oklch(87.2% 0.01 258.338);
    --color-gray-400: oklch(70.7% 0.022 261.325);
    --color-gray-500: oklch(55.1% 0.027 264.364);
    --color-gray-700: oklch(37.3% 0.034 259.733);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --breakpoint-xl: 80rem;
    --container-2xl: 42rem;
    --container-5xl: 64rem;
    --container-7xl: 80rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --text-4xl: 2.25rem;
    --text-4xl--line-height: calc(2.5 / 2.25);
    --font-weight-light: 300;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --tracking-wide: 0.025em;
    --radius-sm: 0.25rem;
    --radius-md: 0.375rem;
    --radius-lg: 0.5rem;
    --radius-2xl: 1rem;
    --shadow-sm: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
    --shadow-2xl: 0 25px 50px -12px rgb(0 0 0 / 0.25);
    --ease-in: cubic-bezier(0.4, 0, 1, 1);
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --animate-spin: spin 1s linear infinite;
    --blur-3xl: 64px;
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
    --color-primary-200: hsl(
    var(--theme-color-primary-hsl-h) var(--theme-color-primary-hsl-s) 85%
  );
    --color-primary-700: hsl(
    var(--theme-color-primary-hsl-h) var(--theme-color-primary-hsl-s) 35%
  );
    --color-accent-100: hsl(
    var(--theme-color-accent-hsl-h) var(--theme-color-accent-hsl-s) 92%
  );
    --color-accent-200: hsl(
    var(--theme-color-accent-hsl-h) var(--theme-color-accent-hsl-s) 85%
  );
    --color-accent-300: hsl(
    var(--theme-color-accent-hsl-h) var(--theme-color-accent-hsl-s) 75%
  );
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .diff {
    @layer daisyui.component {
      position: relative;
      display: grid;
      width: 100%;
      overflow: hidden;
      webkit-user-select: none;
      user-select: none;
      grid-template-rows: 1fr 1.8rem 1fr;
      direction: ltr;
      container-type: inline-size;
      grid-template-columns: auto 1fr;
      &:focus-visible, &:has(.diff-item-1:focus-visible) {
        outline-style: var(--tw-outline-style);
        outline-width: 2px;
        outline-offset: 1px;
        outline-color: var(--color-base-content);
      }
      &:focus-visible {
        outline-style: var(--tw-outline-style);
        outline-width: 2px;
        outline-offset: 1px;
        outline-color: var(--color-base-content);
        .diff-resizer {
          min-width: 95cqi;
          max-width: 95cqi;
        }
      }
      &:has(.diff-item-1:focus-visible) {
        outline-style: var(--tw-outline-style);
        outline-width: 2px;
        outline-offset: 1px;
        .diff-resizer {
          min-width: 5cqi;
          max-width: 5cqi;
        }
      }
      @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
        &:focus {
          .diff-resizer {
            min-width: 5cqi;
            max-width: 5cqi;
          }
        }
        &:has(.diff-item-1:focus) {
          .diff-resizer {
            min-width: 95cqi;
            max-width: 95cqi;
          }
        }
      }
    }
  }
  .modal {
    @layer daisyui.component {
      pointer-events: none;
      visibility: hidden;
      position: fixed;
      inset: calc(0.25rem * 0);
      margin: calc(0.25rem * 0);
      display: grid;
      height: 100%;
      max-height: none;
      width: 100%;
      max-width: none;
      align-items: center;
      justify-items: center;
      background-color: transparent;
      padding: calc(0.25rem * 0);
      color: inherit;
      transition: visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
      overflow: clip;
      overscroll-behavior: contain;
      z-index: 999;
      scrollbar-gutter: auto;
      &::backdrop {
        display: none;
      }
    }
    @layer daisyui.modifier {
      &.modal-open, &[open], &:target, .modal-toggle:checked + & {
        pointer-events: auto;
        visibility: visible;
        opacity: 100%;
        transition: visibility 0s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
        background-color: oklch(0% 0 0/ 0.4);
        .modal-box {
          translate: 0 0;
          scale: 1;
          opacity: 1;
        }
      }
      @starting-style {
        &.modal-open, &[open], &:target, .modal-toggle:checked + & {
          opacity: 0%;
        }
      }
    }
  }
  .drawer-side {
    :where(&) {
      @layer daisyui.component {
        overflow-x: hidden;
        overflow-y: hidden;
      }
    }
    @layer daisyui.component {
      pointer-events: none;
      visibility: hidden;
      position: fixed;
      inset-inline-start: calc(0.25rem * 0);
      top: calc(0.25rem * 0);
      z-index: 10;
      grid-column-start: 1;
      grid-row-start: 1;
      display: grid;
      width: 100%;
      grid-template-columns: repeat(1, minmax(0, 1fr));
      grid-template-rows: repeat(1, minmax(0, 1fr));
      align-items: flex-start;
      justify-items: start;
      overscroll-behavior: contain;
      opacity: 0%;
      transition: opacity 0.2s ease-out 0.1s allow-discrete, visibility 0.3s ease-out 0.1s allow-discrete;
      height: 100vh;
      height: 100dvh;
      > .drawer-overlay {
        position: sticky;
        top: calc(0.25rem * 0);
        cursor: pointer;
        place-self: stretch;
        background-color: oklch(0% 0 0 / 40%);
      }
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
      > *:not(.drawer-overlay) {
        will-change: transform;
        transition: translate 0.3s ease-out, width 0.2s ease-out;
        translate: -100%;
        [dir="rtl"] & {
          translate: 100%;
        }
      }
    }
  }
  .fab {
    @layer daisyui.component {
      pointer-events: none;
      position: fixed;
      inset-inline-end: calc(0.25rem * 4);
      bottom: calc(0.25rem * 4);
      z-index: 999;
      display: flex;
      flex-direction: column-reverse;
      align-items: flex-end;
      gap: calc(0.25rem * 2);
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
      white-space: nowrap;
      > * {
        pointer-events: auto;
        display: flex;
        align-items: center;
        gap: calc(0.25rem * 2);
        &:hover, &:has(:focus-visible) {
          z-index: 1;
        }
      }
      > [tabindex] {
        &:first-child {
          position: relative;
          display: grid;
          transition-property: opacity, visibility, rotate;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        }
      }
      .fab-close {
        position: absolute;
        inset-inline-end: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
      }
      .fab-main-action {
        position: absolute;
        inset-inline-end: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
      }
      &:focus-within {
        &:has(.fab-close), &:has(.fab-main-action) {
          > [tabindex] {
            rotate: 90deg;
            opacity: 0%;
          }
        }
        > [tabindex]:first-child {
          pointer-events: none;
        }
        > :nth-child(n + 2) {
          visibility: visible;
          --tw-scale-x: 100%;
          --tw-scale-y: 100%;
          --tw-scale-z: 100%;
          scale: var(--tw-scale-x) var(--tw-scale-y);
          opacity: 100%;
        }
      }
      > :nth-child(n + 2) {
        visibility: hidden;
        --tw-scale-x: 80%;
        --tw-scale-y: 80%;
        --tw-scale-z: 80%;
        scale: var(--tw-scale-x) var(--tw-scale-y);
        opacity: 0%;
        transition-property: opacity, scale, visibility;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        &.fab-main-action, &.fab-close {
          --tw-scale-x: 100%;
          --tw-scale-y: 100%;
          --tw-scale-z: 100%;
          scale: var(--tw-scale-x) var(--tw-scale-y);
        }
      }
      > :nth-child(3) {
        transition-delay: 30ms;
      }
      > :nth-child(4) {
        transition-delay: 60ms;
      }
      > :nth-child(5) {
        transition-delay: 90ms;
      }
      > :nth-child(6) {
        transition-delay: 120ms;
      }
    }
  }
  .drawer-open {
    @layer daisyui.modifier {
      :where(& > .drawer-side) {
        overflow-y: auto;
      }
      > .drawer-toggle {
        display: none;
        & ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
          position: sticky;
          display: block;
          width: auto;
          overscroll-behavior: auto;
          opacity: 100%;
          & > .drawer-overlay {
            cursor: default;
            background-color: transparent;
          }
          & > *:not(.drawer-overlay) {
            translate: 0%;
            [dir="rtl"] & {
              translate: 0%;
            }
          }
        }
        &:checked ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
        }
      }
    }
  }
  .drawer-toggle {
    @layer daisyui.component {
      position: fixed;
      height: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      appearance: none;
      opacity: 0%;
      &:checked {
        & ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
          overflow-y: auto;
          opacity: 100%;
          & > *:not(.drawer-overlay) {
            translate: 0%;
          }
        }
      }
      &:focus-visible ~ .drawer-content label.drawer-button {
        outline: 2px solid;
        outline-offset: 2px;
      }
    }
  }
  .tooltip {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      --tt-bg: var(--color-neutral);
      --tt-off: calc(100% + 0.5rem);
      --tt-tail: calc(100% + 1px + 0.25rem);
      & > .tooltip-content, &[data-tip]:before {
        position: absolute;
        max-width: 20rem;
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 2);
        padding-block: calc(0.25rem * 1);
        text-align: center;
        white-space: normal;
        color: var(--color-neutral-content);
        opacity: 0%;
        font-size: 0.875rem;
        line-height: 1.25;
        background-color: var(--tt-bg);
        width: max-content;
        pointer-events: none;
        z-index: 2;
        --tw-content: attr(data-tip);
        content: var(--tw-content);
      }
      @media (prefers-reduced-motion: no-preference) {
        & > .tooltip-content, &[data-tip]:before, &:after {
          transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms;
        }
      }
      &:after {
        opacity: 0%;
        background-color: var(--tt-bg);
        content: "";
        pointer-events: none;
        width: 0.625rem;
        height: 0.25rem;
        display: block;
        position: absolute;
        mask-repeat: no-repeat;
        mask-position: -1px 0;
        --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
        mask-image: var(--mask-tooltip);
      }
      &.tooltip-open, &[data-tip]:not([data-tip=""]):hover, &:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover, &:has(:focus-visible) {
        > .tooltip-content, &[data-tip]:before, &:after {
          opacity: 100%;
          --tt-pos: 0rem;
        }
        @media (prefers-reduced-motion: no-preference) {
          & > .tooltip-content, &[data-tip]:before, &:after {
            transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0s, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0ms;
          }
        }
      }
    }
    @layer daisyui.modifier {
      > .tooltip-content, &[data-tip]:before {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-off) 50%;
      }
      &:after {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-tail) 50%;
      }
    }
  }
  .tab {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      cursor: pointer;
      appearance: none;
      flex-wrap: wrap;
      align-items: center;
      justify-content: center;
      text-align: center;
      webkit-user-select: none;
      user-select: none;
      &:hover {
        @media (hover: hover) {
          color: var(--color-base-content);
        }
      }
      --tab-p: 1rem;
      --tab-bg: var(--color-base-100);
      --tab-border-color: var(--color-base-300);
      --tab-radius-ss: 0;
      --tab-radius-se: 0;
      --tab-radius-es: 0;
      --tab-radius-ee: 0;
      --tab-order: 0;
      --tab-radius-min: calc(0.75rem - var(--border));
      border-color: #0000;
      order: var(--tab-order);
      height: var(--tab-height);
      font-size: 0.875rem;
      padding-inline-start: var(--tab-p);
      padding-inline-end: var(--tab-p);
      &:is(input[type="radio"]) {
        min-width: fit-content;
        &:after {
          content: attr(aria-label);
        }
      }
      &:is(label) {
        position: relative;
        input {
          position: absolute;
          inset: calc(0.25rem * 0);
          cursor: pointer;
          appearance: none;
          opacity: 0%;
        }
      }
      &:checked, &:is(label:has(:checked)), &:is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]) {
        & + .tab-content {
          display: block;
          height: calc(100% - var(--tab-height) + var(--border));
        }
      }
      &:not( :checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"] ) {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
        }
      }
      &:not(input):empty {
        flex-grow: 1;
        cursor: default;
      }
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible, &:is(label:has(:checked:focus-visible)) {
        outline: 2px solid currentColor;
        outline-offset: -5px;
      }
      &[disabled] {
        pointer-events: none;
        opacity: 40%;
      }
    }
  }
  .menu {
    @layer daisyui.component {
      display: flex;
      width: fit-content;
      flex-direction: column;
      flex-wrap: wrap;
      padding: calc(0.25rem * 2);
      --menu-active-fg: var(--color-neutral-content);
      --menu-active-bg: var(--color-neutral);
      font-size: 0.875rem;
      :where(li ul) {
        position: relative;
        margin-inline-start: calc(0.25rem * 4);
        padding-inline-start: calc(0.25rem * 2);
        white-space: nowrap;
        &:before {
          position: absolute;
          inset-inline-start: calc(0.25rem * 0);
          top: calc(0.25rem * 3);
          bottom: calc(0.25rem * 3);
          background-color: var(--color-base-content);
          opacity: 10%;
          width: var(--border);
          content: "";
        }
      }
      :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
        display: none;
      }
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        display: grid;
        grid-auto-flow: column;
        align-content: flex-start;
        align-items: center;
        gap: calc(0.25rem * 2);
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 1.5);
        text-align: start;
        transition-property: color, background-color, box-shadow;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
        grid-auto-columns: minmax(auto, max-content) auto max-content;
        text-wrap: balance;
        user-select: none;
      }
      :where(li > details > summary) {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
        &::-webkit-details-marker {
          display: none;
        }
      }
      :where(li > details > summary), :where(li > .menu-dropdown-toggle) {
        &:after {
          justify-self: flex-end;
          display: block;
          height: 0.375rem;
          width: 0.375rem;
          rotate: -135deg;
          translate: 0 -1px;
          transition-property: rotate, translate;
          transition-duration: 0.2s;
          content: "";
          transform-origin: 50% 50%;
          box-shadow: 2px 2px inset;
          pointer-events: none;
        }
      }
      :where(li > details[open] > summary):after, :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
        rotate: 45deg;
        translate: 0 1px;
      }
      :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn) {
        &.menu-focus, &:focus-visible {
          cursor: pointer;
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          color: var(--color-base-content);
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
        cursor: pointer;
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
        box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
      }
      :where(li:empty) {
        background-color: var(--color-base-content);
        opacity: 10%;
        margin: 0.5rem 1rem;
        height: 1px;
      }
      :where(li) {
        position: relative;
        display: flex;
        flex-shrink: 0;
        flex-direction: column;
        flex-wrap: wrap;
        align-items: stretch;
        .badge {
          justify-self: flex-end;
        }
        & > *:not(ul, .menu-title, details, .btn):active, & > *:not(ul, .menu-title, details, .btn).menu-active, & > details > summary:active {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
          color: var(--menu-active-fg);
          background-color: var(--menu-active-bg);
          background-size: auto, calc(var(--noise) * 100%);
          background-image: none, var(--fx-noise);
          &:not(&:active) {
            box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
          }
        }
        &.menu-disabled {
          pointer-events: none;
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
      }
      .dropdown:focus-within {
        .menu-dropdown-toggle:after {
          rotate: 45deg;
          translate: 0 1px;
        }
      }
      .dropdown-content {
        margin-top: calc(0.25rem * 2);
        padding: calc(0.25rem * 2);
        &:before {
          display: none;
        }
      }
    }
  }
  .collapse-arrow {
    @layer daisyui.modifier {
      > .collapse-title:after {
        position: absolute;
        display: block;
        height: 0.5rem;
        width: 0.5rem;
        transform: translateY(-100%) rotate(45deg);
        @media (prefers-reduced-motion: no-preference) {
          transition-property: all;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-duration: 0.2s;
        }
        top: 50%;
        inset-inline-end: 1.4rem;
        content: "";
        transform-origin: 75% 75%;
        box-shadow: 2px 2px;
        pointer-events: none;
      }
    }
  }
  .collapse-plus {
    @layer daisyui.modifier {
      > .collapse-title:after {
        position: absolute;
        display: block;
        height: 0.5rem;
        width: 0.5rem;
        @media (prefers-reduced-motion: no-preference) {
          transition-property: all;
          transition-duration: 300ms;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        }
        top: 0.9rem;
        inset-inline-end: 1.4rem;
        content: "+";
        pointer-events: none;
      }
    }
  }
  .diff-item-2 {
    @layer daisyui.component {
      position: relative;
      grid-column-start: 1;
      grid-row: span 3 / span 3;
      grid-row-start: 1;
      &:after {
        pointer-events: none;
        position: absolute;
        top: calc(1/2 * 100%);
        right: 1px;
        bottom: calc(0.25rem * 0);
        z-index: 2;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-base-100);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-100) 50%, transparent);
        }
        width: 1.2rem;
        height: 1.8rem;
        border: 2px solid var(--color-base-100);
        content: "";
        outline: 1px solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          outline: 1px solid color-mix(in oklab, var(--color-base-content) 5%, #0000);
        }
        outline-offset: -3px;
        backdrop-filter: blur(8px);
        box-shadow: 0 1px 2px 0 oklch(0% 0 0 / 0.1);
        translate: 50% -50%;
      }
      > * {
        pointer-events: none;
        position: absolute;
        top: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
        left: calc(0.25rem * 0);
        height: 100%;
        width: 100cqi;
        max-width: none;
        object-fit: cover;
        object-position: center;
      }
      @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
        &:after {
          content: none;
        }
      }
    }
  }
  .diff-item-1 {
    @layer daisyui.component {
      position: relative;
      z-index: 1;
      grid-column-start: 1;
      grid-row: span 3 / span 3;
      grid-row-start: 1;
      overflow: hidden;
      border-right: 2px solid var(--color-base-100);
      &:focus-visible {
        --tw-outline-style: none;
        outline-style: none;
      }
      > * {
        pointer-events: none;
        position: absolute;
        top: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
        left: calc(0.25rem * 0);
        height: 100%;
        width: 100cqi;
        max-width: none;
        object-fit: cover;
        object-position: center;
      }
    }
  }
  .dropdown {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
      & > *:not(summary):focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      .dropdown-content {
        position: absolute;
      }
      &:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content, &.dropdown-hover:not(:hover) [tabindex]:first-child:focus:not(:focus-visible) ~ .dropdown-content {
        display: none;
        transform-origin: top;
        opacity: 0%;
        scale: 95%;
      }
      &[popover], .dropdown-content {
        z-index: 999;
        @media (prefers-reduced-motion: no-preference) {
          animation: dropdown 0.2s;
          transition-property: opacity, scale, display;
          transition-behavior: allow-discrete;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        }
      }
      @starting-style {
        &[popover], .dropdown-content {
          scale: 95%;
          opacity: 0;
        }
      }
      &.dropdown-open, &:not(.dropdown-hover):focus, &:focus-within {
        > [tabindex]:first-child {
          pointer-events: none;
        }
        .dropdown-content {
          opacity: 100%;
        }
      }
      &.dropdown-hover:hover {
        .dropdown-content {
          opacity: 100%;
          scale: 100%;
        }
      }
      &:is(details) {
        summary {
          &::-webkit-details-marker {
            display: none;
          }
        }
      }
      &.dropdown-open, &:focus, &:focus-within {
        .dropdown-content {
          scale: 100%;
        }
      }
      &:where([popover]) {
        background: #0000;
      }
      &[popover] {
        position: fixed;
        color: inherit;
        @supports not (position-area: bottom) {
          margin: auto;
          &.dropdown-open:not(:popover-open) {
            display: none;
            transform-origin: top;
            opacity: 0%;
            scale: 95%;
          }
          &::backdrop {
            background-color: color-mix(in oklab, #000 30%, #0000);
          }
        }
        &:not(.dropdown-open, :popover-open) {
          display: none;
          transform-origin: top;
          opacity: 0%;
          scale: 95%;
        }
      }
    }
  }
  .btn {
    :where(&) {
      @layer daisyui.component {
        width: unset;
      }
    }
    @layer daisyui.component {
      display: inline-flex;
      flex-shrink: 0;
      cursor: pointer;
      flex-wrap: nowrap;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 1.5);
      text-align: center;
      vertical-align: middle;
      outline-offset: 2px;
      webkit-user-select: none;
      user-select: none;
      padding-inline: var(--btn-p);
      color: var(--btn-fg);
      --tw-prose-links: var(--btn-fg);
      height: var(--size);
      font-size: var(--fontsize, 0.875rem);
      font-weight: 600;
      outline-color: var(--btn-color, var(--color-base-content));
      transition-property: color, background-color, border-color, box-shadow;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      transition-duration: 0.2s;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-color: var(--btn-bg);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--btn-noise);
      border-width: var(--border);
      border-style: solid;
      border-color: var(--btn-border);
      text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
      touch-action: manipulation;
      box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
      --size: calc(var(--size-field, 0.25rem) * 10);
      --btn-bg: var(--btn-color, var(--color-base-200));
      --btn-fg: var(--color-base-content);
      --btn-p: 1rem;
      --btn-border: var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
      }
      --btn-shadow: 0 3px 2px -2px var(--btn-bg),
      0 4px 3px -2px var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
      0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
      }
      --btn-noise: var(--fx-noise);
      .prose & {
        text-decoration-line: none;
      }
      @media (hover: hover) {
        &:hover {
          --btn-bg: var(--btn-color, var(--color-base-200));
          @supports (color: color-mix(in lab, red, red)) {
            --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
          }
        }
      }
      &:focus-visible, &:has(:focus-visible) {
        outline-width: 2px;
        outline-style: solid;
        isolation: isolate;
      }
      &:active:not(.btn-active) {
        translate: 0 0.5px;
        --btn-bg: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
        }
        --btn-border: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
        }
        --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
      }
      &:is(input[type="checkbox"], input[type="radio"]) {
        appearance: none;
        &::after {
          content: attr(aria-label);
        }
      }
      &:where(input:checked:not(.filter .btn)) {
        --btn-color: var(--color-primary);
        --btn-fg: var(--color-primary-content);
        isolation: isolate;
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
            }
          }
        }
      }
    }
    &[disabled] {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
            }
          }
        }
      }
    }
  }
  .loading {
    @layer daisyui.component {
      pointer-events: none;
      display: inline-block;
      aspect-ratio: 1 / 1;
      background-color: currentcolor;
      vertical-align: middle;
      width: calc(var(--size-selector, 0.25rem) * 6);
      mask-size: 100%;
      mask-repeat: no-repeat;
      mask-position: center;
      mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
    }
  }
  .pointer-events-auto {
    pointer-events: auto;
  }
  .pointer-events-none {
    pointer-events: none;
  }
  .countdown {
    &.countdown {
      line-height: 1em;
    }
    @layer daisyui.component {
      display: inline-flex;
      & > * {
        visibility: hidden;
        position: relative;
        display: inline-block;
        overflow-y: clip;
        transition: width 0.4s ease-out 0.2s;
        height: 1em;
        --value-v: calc(mod(max(0, var(--value)), 1000));
        --value-hundreds: calc(round(to-zero, var(--value-v) / 100, 1));
        --value-tens: calc(round(to-zero, mod(var(--value-v), 100) / 10, 1));
        --value-ones: calc(mod(var(--value-v), 100));
        --show-hundreds: clamp(clamp(0, var(--digits, 1) - 2, 1), var(--value-hundreds), 1);
        --show-tens: clamp(
        clamp(0, var(--digits, 1) - 1, 1),
        var(--value-tens) + var(--show-hundreds),
        1
      );
        --first-digits: calc(round(to-zero, var(--value-v) / 10, 1));
        width: calc(1ch + var(--show-tens) * 1ch + var(--show-hundreds) * 1ch);
        direction: ltr;
        &:before, &:after {
          visibility: visible;
          position: absolute;
          overflow-x: clip;
          content: "00\A 01\A 02\A 03\A 04\A 05\A 06\A 07\A 08\A 09\A 10\A 11\A 12\A 13\A 14\A 15\A 16\A 17\A 18\A 19\A 20\A 21\A 22\A 23\A 24\A 25\A 26\A 27\A 28\A 29\A 30\A 31\A 32\A 33\A 34\A 35\A 36\A 37\A 38\A 39\A 40\A 41\A 42\A 43\A 44\A 45\A 46\A 47\A 48\A 49\A 50\A 51\A 52\A 53\A 54\A 55\A 56\A 57\A 58\A 59\A 60\A 61\A 62\A 63\A 64\A 65\A 66\A 67\A 68\A 69\A 70\A 71\A 72\A 73\A 74\A 75\A 76\A 77\A 78\A 79\A 80\A 81\A 82\A 83\A 84\A 85\A 86\A 87\A 88\A 89\A 90\A 91\A 92\A 93\A 94\A 95\A 96\A 97\A 98\A 99\A";
          font-variant-numeric: tabular-nums;
          white-space: pre;
          text-align: end;
          direction: rtl;
          transition: all 1s cubic-bezier(1, 0, 0, 1), width 0.2s ease-out 0.2s, opacity 0.2s ease-out 0.2s;
        }
        &:before {
          width: calc(1ch + var(--show-hundreds) * 1ch);
          top: calc(var(--first-digits) * -1em);
          inset-inline-end: 0;
          opacity: var(--show-tens);
        }
        &:after {
          width: 1ch;
          top: calc(var(--value-ones) * -1em);
          inset-inline-start: 0;
        }
      }
    }
  }
  .collapse {
    &:not(td, tr, colgroup) {
      visibility: revert-layer;
    }
    @layer daisyui.component {
      display: grid;
      position: relative;
      overflow: hidden;
      border-radius: var(--radius-box, 1rem);
      width: 100%;
      grid-template-rows: max-content 0fr;
      grid-template-columns: minmax(0, 1fr);
      isolation: isolate;
      @media (prefers-reduced-motion: no-preference) {
        transition: grid-template-rows 0.2s;
      }
      > input:is([type="checkbox"], [type="radio"]) {
        grid-column-start: 1;
        grid-row-start: 1;
        appearance: none;
        opacity: 0;
        z-index: 1;
        width: 100%;
        padding: 1rem;
        padding-inline-end: 3rem;
        min-height: 1lh;
        transition: background-color 0.2s ease-out;
      }
      &:is( [open], [tabindex]:focus:not(.collapse-close), [tabindex]:focus-within:not(.collapse-close) ), &:not(.collapse-close):has(> input:is([type="checkbox"], [type="radio"]):checked) {
        grid-template-rows: max-content 1fr;
      }
      &:is( [open], [tabindex]:focus:not(.collapse-close), [tabindex]:focus-within:not(.collapse-close) ) > .collapse-content, &:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
        visibility: visible;
        min-height: fit-content;
      }
      &:focus-visible, &:has(> input:is([type="checkbox"], [type="radio"]):focus-visible), &:has(summary:focus-visible) {
        outline-color: var(--color-base-content);
        outline-style: solid;
        outline-width: 2px;
        outline-offset: 2px;
      }
      &:not(.collapse-close) {
        > input[type="checkbox"], > input[type="radio"]:not(:checked), > .collapse-title {
          cursor: pointer;
        }
      }
      &[tabindex]:focus:not(.collapse-close, .collapse[open]), &[tabindex]:focus-within:not(.collapse-close, .collapse[open]) {
        > .collapse-title {
          cursor: unset;
        }
      }
      &:is( [open], [tabindex]:focus:not(.collapse-close), [tabindex]:focus-within:not(.collapse-close) ) > :where(.collapse-content), &:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
        padding-bottom: 1rem;
        @media (prefers-reduced-motion: no-preference) {
          transition: padding 0.2s ease-out, background-color 0.2s ease-out;
        }
      }
    }
    @layer daisyui.modifier {
      &:is([open]) {
        &.collapse-arrow {
          > .collapse-title:after {
            @media (prefers-reduced-motion: no-preference) {
              transform: translateY(-50%) rotate(225deg);
            }
          }
        }
      }
      &.collapse-open {
        &.collapse-arrow {
          > .collapse-title:after {
            @media (prefers-reduced-motion: no-preference) {
              transform: translateY(-50%) rotate(225deg);
            }
          }
        }
        &.collapse-plus {
          > .collapse-title:after {
            content: "−";
          }
        }
      }
      &[tabindex].collapse-arrow:focus:not(.collapse-close), &.collapse-arrow[tabindex]:focus-within:not(.collapse-close) {
        > .collapse-title:after {
          transform: translateY(-50%) rotate(225deg);
        }
      }
      &.collapse-arrow:not(.collapse-close) {
        > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
          transform: translateY(-50%) rotate(225deg);
        }
      }
      &[open] {
        &.collapse-plus {
          > .collapse-title:after {
            content: "−";
          }
        }
      }
      &[tabindex].collapse-plus:focus:not(.collapse-close) {
        > .collapse-title:after {
          content: "−";
        }
      }
      &.collapse-plus:not(.collapse-close) {
        > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
          content: "−";
        }
      }
    }
    &:is(details) {
      @layer daisyui.component {
        width: 100%;
        @media (prefers-reduced-motion: no-preference) {
          @supports (transition: content-visibility allow-discrete) and (interpolate-size: allow-keywords) {
            &::details-content {
              transition: content-visibility 0.2s allow-discrete, height 0.2s;
              height: 0;
              interpolate-size: allow-keywords;
            }
            &:where([open], .collapse-open)::details-content {
              height: auto;
            }
          }
        }
        & summary {
          position: relative;
          display: block;
          &::-webkit-details-marker {
            display: none;
          }
        }
      }
    }
    &:is(details) summary {
      @layer daisyui.component {
        outline: none;
      }
    }
  }
  .collapse-content {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
    }
    @layer daisyui.component {
      visibility: hidden;
      grid-column-start: 1;
      grid-row-start: 2;
      min-height: 0;
      padding-left: 1rem;
      padding-right: 1rem;
      cursor: unset;
      @media (prefers-reduced-motion: no-preference) {
        transition: visibility 0.2s, padding 0.2s ease-out, background-color 0.2s ease-out;
      }
    }
  }
  .collapse-open {
    @layer daisyui.modifier {
      grid-template-rows: max-content 1fr;
      > .collapse-content {
        visibility: visible;
        min-height: fit-content;
        padding-bottom: 1rem;
        @media (prefers-reduced-motion: no-preference) {
          transition: padding 0.2s ease-out, background-color 0.2s ease-out;
        }
      }
    }
  }
  .collapse {
    visibility: collapse;
  }
  .invisible {
    visibility: hidden;
  }
  .visible {
    visibility: visible;
  }
  .radial-progress {
    @layer daisyui.component {
      position: relative;
      display: inline-grid;
      height: var(--size);
      width: var(--size);
      place-content: center;
      border-radius: calc(infinity * 1px);
      background-color: transparent;
      vertical-align: middle;
      box-sizing: content-box;
      --value: 0;
      --size: 5rem;
      --thickness: calc(var(--size) / 10);
      --radialprogress: calc(var(--value) * 1%);
      transition: --radialprogress 0.3s linear;
      &:before {
        position: absolute;
        inset: calc(0.25rem * 0);
        border-radius: calc(infinity * 1px);
        content: "";
        background: radial-gradient(farthest-side, currentColor 98%, #0000) top/var(--thickness) var(--thickness) no-repeat, conic-gradient(currentColor var(--radialprogress), #0000 0);
        webkit-mask: radial-gradient( farthest-side, #0000 calc(100% - var(--thickness)), #000 calc(100% + 0.5px - var(--thickness)) );
        mask: radial-gradient( farthest-side, #0000 calc(100% - var(--thickness)), #000 calc(100% + 0.5px - var(--thickness)) );
      }
      &:after {
        position: absolute;
        border-radius: calc(infinity * 1px);
        background-color: currentcolor;
        transition: transform 0.3s linear;
        content: "";
        inset: calc(50% - var(--thickness) / 2);
        transform: rotate(calc(var(--value) * 3.6deg - 90deg)) translate(calc(var(--size) / 2 - 50%));
      }
    }
  }
  .list {
    @layer daisyui.component {
      display: flex;
      flex-direction: column;
      font-size: 0.875rem;
      .list-row {
        --list-grid-cols: minmax(0, auto) 1fr;
        position: relative;
        display: grid;
        grid-auto-flow: column;
        gap: calc(0.25rem * 4);
        border-radius: var(--radius-box);
        padding: calc(0.25rem * 4);
        word-break: break-word;
        grid-template-columns: var(--list-grid-cols);
      }
      & > :not(:last-child) {
        &.list-row, .list-row {
          &:after {
            content: "";
            border-bottom: var(--border) solid;
            inset-inline: var(--radius-box);
            position: absolute;
            bottom: calc(0.25rem * 0);
            border-color: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
            }
          }
        }
      }
    }
    @layer daisyui.modifier {
      .list-row {
        &:has(.list-col-grow:nth-child(1)) {
          --list-grid-cols: 1fr;
        }
        &:has(.list-col-grow:nth-child(2)) {
          --list-grid-cols: minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(3)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(4)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(5)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(6)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
          minmax(0, auto) 1fr;
        }
        :not(.list-col-wrap) {
          grid-row-start: 1;
        }
      }
    }
  }
  .toast {
    @layer daisyui.component {
      position: fixed;
      inset-inline-start: auto;
      inset-inline-end: calc(0.25rem * 4);
      top: auto;
      bottom: calc(0.25rem * 4);
      display: flex;
      flex-direction: column;
      gap: calc(0.25rem * 2);
      background-color: transparent;
      translate: var(--toast-x, 0) var(--toast-y, 0);
      width: max-content;
      max-width: calc(100vw - 2rem);
      & > * {
        @media (prefers-reduced-motion: no-preference) {
          animation: toast 0.25s ease-out;
        }
      }
    }
  }
  .toggle {
    @layer daisyui.component {
      border: var(--border) solid currentColor;
      color: var(--input-color);
      position: relative;
      display: inline-grid;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      place-content: center;
      vertical-align: middle;
      webkit-user-select: none;
      user-select: none;
      grid-template-columns: 0fr 1fr 1fr;
      --radius-selector-max: calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    );
      border-radius: calc( var(--radius-selector) + min(var(--toggle-p), var(--radius-selector-max)) + min(var(--border), var(--radius-selector-max)) );
      padding: var(--toggle-p);
      box-shadow: 0 1px currentColor inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
      }
      transition: color 0.3s, grid-template-columns 0.2s;
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      }
      --toggle-p: calc(var(--size) * 0.125);
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: calc((var(--size) * 2) - (var(--border) + var(--toggle-p)) * 2);
      height: var(--size);
      > * {
        z-index: 1;
        grid-column: span 1 / span 1;
        grid-column-start: 2;
        grid-row-start: 1;
        height: 100%;
        cursor: pointer;
        appearance: none;
        background-color: transparent;
        padding: calc(0.25rem * 0.5);
        transition: opacity 0.2s, rotate 0.4s;
        border: none;
        &:focus {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
        &:nth-child(2) {
          color: var(--color-base-100);
          rotate: 0deg;
        }
        &:nth-child(3) {
          color: var(--color-base-100);
          opacity: 0%;
          rotate: -15deg;
        }
      }
      &:has(:checked) {
        > :nth-child(2) {
          opacity: 0%;
          rotate: 15deg;
        }
        > :nth-child(3) {
          opacity: 100%;
          rotate: 0deg;
        }
      }
      &:before {
        position: relative;
        inset-inline-start: calc(0.25rem * 0);
        grid-column-start: 2;
        grid-row-start: 1;
        aspect-ratio: 1 / 1;
        height: 100%;
        border-radius: var(--radius-selector);
        background-color: currentcolor;
        translate: 0;
        --tw-content: "";
        content: var(--tw-content);
        transition: background-color 0.1s, translate 0.2s, inset-inline-start 0.2s;
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor;
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000);
        }
        background-size: auto, calc(var(--noise) * 100%);
        background-image: none, var(--fx-noise);
      }
      @media (forced-colors: active) {
        &:before {
          outline-style: var(--tw-outline-style);
          outline-width: 1px;
          outline-offset: calc(1px * -1);
        }
      }
      @media print {
        &:before {
          outline: 0.25rem solid;
          outline-offset: -1rem;
        }
      }
      &:focus-visible, &:has(:focus-visible) {
        outline: 2px solid currentColor;
        outline-offset: 2px;
      }
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        grid-template-columns: 1fr 1fr 0fr;
        background-color: var(--color-base-100);
        --input-color: var(--color-base-content);
        &:before {
          background-color: currentcolor;
        }
        @starting-style {
          &:before {
            opacity: 0;
          }
        }
      }
      &:indeterminate {
        grid-template-columns: 0.5fr 1fr 0.5fr;
      }
      &:disabled {
        cursor: not-allowed;
        opacity: 30%;
        &:before {
          background-color: transparent;
          border: var(--border) solid currentColor;
        }
      }
    }
  }
  .input {
    @layer daisyui.component {
      cursor: text;
      border: var(--border) solid #0000;
      position: relative;
      display: inline-flex;
      flex-shrink: 1;
      appearance: none;
      align-items: center;
      gap: calc(0.25rem * 2);
      background-color: var(--color-base-100);
      padding-inline: calc(0.25rem * 3);
      vertical-align: middle;
      white-space: nowrap;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      &:where(input) {
        display: inline-flex;
      }
      :where(input) {
        display: inline-flex;
        height: 100%;
        width: 100%;
        appearance: none;
        background-color: transparent;
        border: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      :where(input[type="url"]), :where(input[type="email"]) {
        direction: ltr;
      }
      :where(input[type="date"]) {
        display: inline-flex;
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
        z-index: 1;
      }
      @media (pointer: coarse) {
        @supports (-webkit-touch-callout: none) {
          &:focus, &:focus-within {
            --font-size: 1rem;
          }
        }
      }
      &:has(> input[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
        box-shadow: none;
      }
      &:has(> input[disabled]) > input[disabled] {
        cursor: not-allowed;
      }
      &::-webkit-date-and-time-value {
        text-align: inherit;
      }
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -3);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
      &::-webkit-calendar-picker-indicator {
        position: absolute;
        inset-inline-end: 0.75em;
      }
      &:has(> input[type="date"]) {
        :where(input[type="date"]) {
          display: inline-flex;
          webkit-appearance: none;
          appearance: none;
        }
        input[type="date"]::-webkit-calendar-picker-indicator {
          position: absolute;
          inset-inline-end: 0.75em;
          width: 1em;
          height: 1em;
          cursor: pointer;
        }
      }
    }
  }
  .indicator {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      width: max-content;
      :where(.indicator-item) {
        z-index: 1;
        position: absolute;
        white-space: nowrap;
        top: var(--indicator-t, 0);
        bottom: var(--indicator-b, auto);
        left: var(--indicator-s, auto);
        right: var(--indicator-e, 0);
        translate: var(--indicator-x, 50%) var(--indicator-y, -50%);
      }
    }
  }
  .table {
    @layer daisyui.component {
      font-size: 0.875rem;
      position: relative;
      width: 100%;
      border-radius: var(--radius-box);
      text-align: left;
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        text-align: right;
      }
      tr.row-hover {
        &, &:nth-child(even) {
          &:hover {
            @media (hover: hover) {
              background-color: var(--color-base-200);
            }
          }
        }
      }
      :where(th, td) {
        padding-inline: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 3);
        vertical-align: middle;
      }
      :where(thead, tfoot) {
        white-space: nowrap;
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
        }
        font-size: 0.875rem;
        font-weight: 600;
      }
      :where(tfoot) {
        border-top: var(--border) solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
        }
      }
      :where(.table-pin-rows thead tr) {
        position: sticky;
        top: calc(0.25rem * 0);
        z-index: 1;
        background-color: var(--color-base-100);
      }
      :where(.table-pin-rows tfoot tr) {
        position: sticky;
        bottom: calc(0.25rem * 0);
        z-index: 1;
        background-color: var(--color-base-100);
      }
      :where(.table-pin-cols tr th) {
        position: sticky;
        right: calc(0.25rem * 0);
        left: calc(0.25rem * 0);
        background-color: var(--color-base-100);
      }
      :where(thead tr, tbody tr:not(:last-child)) {
        border-bottom: var(--border) solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
        }
      }
    }
  }
  .steps {
    @layer daisyui.component {
      display: inline-grid;
      grid-auto-flow: column;
      overflow: hidden;
      overflow-x: auto;
      counter-reset: step;
      grid-auto-columns: 1fr;
      .step {
        display: grid;
        grid-template-columns: repeat(1, minmax(0, 1fr));
        grid-template-columns: auto;
        grid-template-rows: repeat(2, minmax(0, 1fr));
        grid-template-rows: 40px 1fr;
        place-items: center;
        text-align: center;
        min-width: 4rem;
        --step-bg: var(--color-base-300);
        --step-fg: var(--color-base-content);
        &:before {
          top: calc(0.25rem * 0);
          grid-column-start: 1;
          grid-row-start: 1;
          height: calc(0.25rem * 2);
          width: 100%;
          border: 1px solid;
          color: var(--step-bg);
          background-color: var(--step-bg);
          --tw-content: "";
          content: var(--tw-content);
          margin-inline-start: -100%;
        }
        > .step-icon, &:not(:has(.step-icon)):after {
          content: counter(step);
          counter-increment: step;
          z-index: 1;
          color: var(--step-fg);
          background-color: var(--step-bg);
          border: 1px solid var(--step-bg);
          position: relative;
          grid-column-start: 1;
          grid-row-start: 1;
          display: grid;
          height: calc(0.25rem * 8);
          width: calc(0.25rem * 8);
          place-items: center;
          place-self: center;
          border-radius: calc(infinity * 1px);
        }
        &:first-child:before {
          content: none;
        }
        &[data-content]:after {
          content: attr(data-content);
        }
      }
    }
    @layer daisyui.modifier {
      .step-neutral {
        + .step-neutral:before, &:after, > .step-icon {
          --step-bg: var(--color-neutral);
          --step-fg: var(--color-neutral-content);
        }
      }
      .step-primary {
        + .step-primary:before, &:after, > .step-icon {
          --step-bg: var(--color-primary);
          --step-fg: var(--color-primary-content);
        }
      }
      .step-secondary {
        + .step-secondary:before, &:after, > .step-icon {
          --step-bg: var(--color-secondary);
          --step-fg: var(--color-secondary-content);
        }
      }
      .step-accent {
        + .step-accent:before, &:after, > .step-icon {
          --step-bg: var(--color-accent);
          --step-fg: var(--color-accent-content);
        }
      }
      .step-info {
        + .step-info:before, &:after, > .step-icon {
          --step-bg: var(--color-info);
          --step-fg: var(--color-info-content);
        }
      }
      .step-success {
        + .step-success:before, &:after, > .step-icon {
          --step-bg: var(--color-success);
          --step-fg: var(--color-success-content);
        }
      }
      .step-warning {
        + .step-warning:before, &:after, > .step-icon {
          --step-bg: var(--color-warning);
          --step-fg: var(--color-warning-content);
        }
      }
      .step-error {
        + .step-error:before, &:after, > .step-icon {
          --step-bg: var(--color-error);
          --step-fg: var(--color-error-content);
        }
      }
    }
  }
  .range {
    @layer daisyui.component {
      appearance: none;
      webkit-appearance: none;
      --range-thumb: var(--color-base-100);
      --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
      --range-progress: currentColor;
      --range-fill: 1;
      --range-p: 0.25rem;
      --range-bg: currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        --range-bg: color-mix(in oklab, currentColor 10%, #0000);
      }
      cursor: pointer;
      overflow: hidden;
      background-color: transparent;
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      --radius-selector-max: calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    );
      border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
      border: none;
      height: var(--range-thumb-size);
      [dir="rtl"] & {
        --range-dir: -1;
      }
      &:focus {
        outline: none;
      }
      &:focus-visible {
        outline: 2px solid;
        outline-offset: 2px;
      }
      &::-webkit-slider-runnable-track {
        width: 100%;
        background-color: var(--range-bg);
        border-radius: var(--radius-selector);
        height: calc(var(--range-thumb-size) * 0.5);
      }
      @media (forced-colors: active) {
        &::-webkit-slider-runnable-track {
          border: 1px solid;
        }
      }
      @media (forced-colors: active) {
        &::-moz-range-track {
          border: 1px solid;
        }
      }
      &::-webkit-slider-thumb {
        position: relative;
        box-sizing: border-box;
        border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
        background-color: currentColor;
        height: var(--range-thumb-size);
        width: var(--range-thumb-size);
        border: var(--range-p) solid;
        appearance: none;
        webkit-appearance: none;
        top: 50%;
        color: var(--range-progress);
        transform: translateY(-50%);
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        }
      }
      &::-moz-range-track {
        width: 100%;
        background-color: var(--range-bg);
        border-radius: var(--radius-selector);
        height: calc(var(--range-thumb-size) * 0.5);
      }
      &::-moz-range-thumb {
        position: relative;
        box-sizing: border-box;
        border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
        background-color: currentColor;
        height: var(--range-thumb-size);
        width: var(--range-thumb-size);
        border: var(--range-p) solid;
        top: 50%;
        color: var(--range-progress);
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        }
      }
      &:disabled {
        cursor: not-allowed;
        opacity: 30%;
      }
    }
  }
  .chat-bubble {
    @layer daisyui.component {
      position: relative;
      display: block;
      width: fit-content;
      border-radius: var(--radius-field);
      background-color: var(--color-base-300);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 2);
      color: var(--color-base-content);
      grid-row-end: 3;
      min-height: 2rem;
      min-width: 2.5rem;
      max-width: 90%;
      &:before {
        position: absolute;
        bottom: calc(0.25rem * 0);
        height: calc(0.25rem * 3);
        width: calc(0.25rem * 3);
        background-color: inherit;
        content: "";
        mask-repeat: no-repeat;
        mask-image: var(--mask-chat);
        mask-position: 0px -1px;
        mask-size: 0.8125rem;
      }
    }
  }
  .select {
    @layer daisyui.component {
      border: var(--border) solid #0000;
      position: relative;
      display: inline-flex;
      flex-shrink: 1;
      appearance: none;
      align-items: center;
      gap: calc(0.25rem * 1.5);
      background-color: var(--color-base-100);
      padding-inline-start: calc(0.25rem * 3);
      padding-inline-end: calc(0.25rem * 7);
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      font-size: 0.875rem;
      touch-action: manipulation;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
      background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
      background-size: 4px 4px, 4px 4px;
      background-repeat: no-repeat;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      border-color: var(--input-color);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      [dir="rtl"] & {
        background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
        &::picker(select), select::picker(select) {
          translate: 0.5rem 0;
        }
      }
      &[multiple] {
        height: auto;
        overflow: auto;
        padding-block: calc(0.25rem * 3);
        padding-inline-end: calc(0.25rem * 3);
        background-image: none;
      }
      select {
        margin-inline-start: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * -7);
        width: calc(100% + 2.75rem);
        appearance: none;
        padding-inline-start: calc(0.25rem * 3);
        padding-inline-end: calc(0.25rem * 7);
        height: calc(100% - calc(var(--border) * 2));
        align-items: center;
        background: inherit;
        border-radius: inherit;
        border-style: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
        &:not(:last-child) {
          margin-inline-end: calc(0.25rem * -5.5);
          background-image: none;
        }
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
        z-index: 1;
      }
      &:has(> select[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
      }
      &:has(> select[disabled]) > select[disabled] {
        cursor: not-allowed;
      }
      &, & select {
        @supports (appearance: base-select) {
          appearance: base-select;
        }
        @supports (appearance: base-select) {
          &::picker(select) {
            appearance: base-select;
          }
        }
        &::picker(select) {
          color: inherit;
          max-height: min(24rem, 70dvh);
          margin-inline: 0.5rem;
          translate: -0.5rem 0;
          border: var(--border) solid var(--color-base-200);
          margin-block: calc(0.25rem * 2);
          border-radius: var(--radius-box);
          padding: calc(0.25rem * 2);
          background-color: inherit;
          box-shadow: 0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2);
          box-shadow: 0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1));
        }
        &::picker-icon {
          display: none;
        }
        optgroup {
          padding-top: 0.5em;
          option {
            &:nth-child(1) {
              margin-top: 0.5em;
            }
          }
        }
        option {
          border-radius: var(--radius-field);
          padding-inline: calc(0.25rem * 3);
          padding-block: calc(0.25rem * 1.5);
          transition-property: color, background-color;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
          white-space: normal;
          &:not(:disabled) {
            &:hover, &:focus-visible {
              cursor: pointer;
              background-color: var(--color-base-content);
              @supports (color: color-mix(in lab, red, red)) {
                background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
              }
              --tw-outline-style: none;
              outline-style: none;
              @media (forced-colors: active) {
                outline: 2px solid transparent;
                outline-offset: 2px;
              }
            }
            &:active {
              background-color: var(--color-neutral);
              color: var(--color-neutral-content);
              box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--color-neutral);
            }
          }
        }
      }
    }
  }
  .diff-resizer {
    @layer daisyui.component {
      position: relative;
      z-index: 1;
      grid-column-start: 1;
      grid-row-start: 2;
      height: calc(0.25rem * 4);
      width: 50cqi;
      max-width: calc(100cqi - 1rem);
      min-width: 1rem;
      resize: horizontal;
      overflow: hidden;
      opacity: 0%;
      transform: scaleY(3) translate(0.35rem, 0.35rem);
      cursor: ew-resize;
      transform-origin: 100% 100%;
      clip-path: inset(calc(100% - 0.75rem) 0 0 calc(100% - 0.75rem));
      transition: min-width 0.3s ease-out, max-width 0.3s ease-out;
    }
  }
  .timeline {
    @layer daisyui.component {
      position: relative;
      display: flex;
      > li {
        position: relative;
        display: grid;
        flex-shrink: 0;
        align-items: center;
        grid-template-rows: var(--timeline-row-start, minmax(0, 1fr)) auto var( --timeline-row-end, minmax(0, 1fr) );
        grid-template-columns: var(--timeline-col-start, minmax(0, 1fr)) auto var( --timeline-col-end, minmax(0, 1fr) );
        > hr {
          border: none;
          width: 100%;
          &:first-child {
            grid-column-start: 1;
            grid-row-start: 2;
          }
          &:last-child {
            grid-column-start: 3;
            grid-column-end: none;
            grid-row-start: 2;
            grid-row-end: auto;
          }
          @media print {
            border: 0.1px solid var(--color-base-300);
          }
        }
      }
      :where(hr) {
        height: calc(0.25rem * 1);
        background-color: var(--color-base-300);
      }
      &:has(.timeline-middle hr) {
        &:first-child {
          border-start-start-radius: 0;
          border-end-start-radius: 0;
          border-start-end-radius: var(--radius-selector);
          border-end-end-radius: var(--radius-selector);
        }
        &:last-child {
          border-start-start-radius: var(--radius-selector);
          border-end-start-radius: var(--radius-selector);
          border-start-end-radius: 0;
          border-end-end-radius: 0;
        }
      }
      &:not(:has(.timeline-middle)) {
        :first-child hr:last-child {
          border-start-start-radius: var(--radius-selector);
          border-end-start-radius: var(--radius-selector);
          border-start-end-radius: 0;
          border-end-end-radius: 0;
        }
        :last-child hr:first-child {
          border-start-start-radius: 0;
          border-end-start-radius: 0;
          border-start-end-radius: var(--radius-selector);
          border-end-end-radius: var(--radius-selector);
        }
      }
    }
  }
  .image-full {
    @layer daisyui.modifier {
      display: grid;
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
      > .card-body {
        position: relative;
        color: var(--color-neutral-content);
      }
      :where(figure) {
        overflow: hidden;
        border-radius: inherit;
      }
      > figure img {
        height: 100%;
        object-fit: cover;
        filter: brightness(28%);
      }
    }
  }
  .swap {
    @layer daisyui.component {
      position: relative;
      display: inline-grid;
      cursor: pointer;
      place-content: center;
      vertical-align: middle;
      webkit-user-select: none;
      user-select: none;
      input {
        appearance: none;
        border: none;
      }
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
        @media (prefers-reduced-motion: no-preference) {
          transition-property: transform, rotate, opacity;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
        }
      }
      .swap-on, .swap-indeterminate, input:indeterminate ~ .swap-on {
        opacity: 0%;
      }
      input:is(:checked, :indeterminate) {
        & ~ .swap-off {
          opacity: 0%;
        }
      }
      input:checked ~ .swap-on, input:indeterminate ~ .swap-indeterminate {
        opacity: 100%;
        backface-visibility: visible;
      }
    }
  }
  .collapse-title {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
    }
    @layer daisyui.component {
      position: relative;
      width: 100%;
      padding: 1rem;
      padding-inline-end: 3rem;
      min-height: 1lh;
      transition: background-color 0.2s ease-out;
    }
  }
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip-path: inset(50%);
    white-space: nowrap;
    border-width: 0;
  }
  .not-sr-only {
    position: static;
    width: auto;
    height: auto;
    padding: 0;
    margin: 0;
    overflow: visible;
    clip-path: none;
    white-space: normal;
  }
  .mockup-browser {
    @layer daisyui.component {
      position: relative;
      overflow: hidden;
      overflow-x: auto;
      border-radius: var(--radius-box);
      pre[data-prefix] {
        &:before {
          content: attr(data-prefix);
          display: inline-block;
          text-align: right;
        }
      }
      .mockup-browser-toolbar {
        margin-block: calc(0.25rem * 3);
        display: inline-flex;
        width: 100%;
        align-items: center;
        padding-right: 1.4em;
        &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
          flex-direction: row-reverse;
        }
        &:before {
          content: "";
          margin-right: 4.8rem;
          display: inline-block;
          aspect-ratio: 1 / 1;
          height: calc(0.25rem * 3);
          border-radius: calc(infinity * 1px);
          opacity: 30%;
          box-shadow: 1.4em 0, 2.8em 0, 4.2em 0;
        }
        .input {
          margin-inline: auto;
          display: flex;
          height: 100%;
          align-items: center;
          gap: calc(0.25rem * 2);
          overflow: hidden;
          background-color: var(--color-base-200);
          text-overflow: ellipsis;
          white-space: nowrap;
          font-size: 0.75rem;
          direction: ltr;
          &:before {
            content: "";
            width: calc(0.25rem * 4);
            height: calc(0.25rem * 4);
            opacity: 50%;
            background-color: currentColor;
            mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z' clip-rule='evenodd' /%3E%3C/svg%3E") no-repeat center;
            mask-size: contain;
          }
        }
      }
    }
  }
  .menu-horizontal {
    @layer daisyui.modifier {
      display: inline-flex;
      flex-direction: row;
      & > li:not(.menu-title) > details > ul {
        position: absolute;
        margin-inline-start: calc(0.25rem * 0);
        margin-top: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 2);
        padding-inline-end: calc(0.25rem * 2);
      }
      & > li > details > ul {
        &:before {
          content: none;
        }
      }
      :where(& > li:not(.menu-title) > details > ul) {
        border-radius: var(--radius-box);
        background-color: var(--color-base-100);
        box-shadow: 0 1px 3px 0 oklch(0% 0 0/0.1), 0 1px 2px -1px oklch(0% 0 0/0.1);
      }
    }
  }
  .menu-vertical {
    @layer daisyui.modifier {
      display: inline-flex;
      flex-direction: column;
      & > li:not(.menu-title) > details > ul {
        position: relative;
        margin-inline-start: calc(0.25rem * 4);
        margin-top: calc(0.25rem * 0);
        padding-block: calc(0.25rem * 0);
        padding-inline-end: calc(0.25rem * 0);
      }
    }
  }
  .mockup-code {
    @layer daisyui.component {
      position: relative;
      overflow: hidden;
      overflow-x: auto;
      border-radius: var(--radius-box);
      background-color: var(--color-neutral);
      padding-block: calc(0.25rem * 5);
      color: var(--color-neutral-content);
      font-size: 0.875rem;
      direction: ltr;
      &:before {
        content: "";
        margin-bottom: calc(0.25rem * 4);
        display: block;
        height: calc(0.25rem * 3);
        width: calc(0.25rem * 3);
        border-radius: calc(infinity * 1px);
        opacity: 30%;
        box-shadow: 1.4em 0, 2.8em 0, 4.2em 0;
      }
      pre {
        padding-right: calc(0.25rem * 5);
        &:before {
          content: "";
          margin-right: 2ch;
        }
        &[data-prefix] {
          &:before {
            content: attr(data-prefix);
            display: inline-block;
            width: calc(0.25rem * 8);
            text-align: right;
            opacity: 50%;
          }
        }
      }
    }
  }
  .mockup-window {
    @layer daisyui.component {
      position: relative;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      overflow-x: auto;
      border-radius: var(--radius-box);
      padding-top: calc(0.25rem * 5);
      &:before {
        content: "";
        margin-bottom: calc(0.25rem * 4);
        display: block;
        aspect-ratio: 1 / 1;
        height: calc(0.25rem * 3);
        flex-shrink: 0;
        align-self: flex-start;
        border-radius: calc(infinity * 1px);
        opacity: 30%;
        box-shadow: 1.4em 0, 2.8em 0, 4.2em 0;
      }
      [dir="rtl"] &:before {
        align-self: flex-end;
      }
      pre[data-prefix] {
        &:before {
          content: attr(data-prefix);
          display: inline-block;
          text-align: right;
        }
      }
    }
  }
  .avatar {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      vertical-align: middle;
      & > div {
        display: block;
        aspect-ratio: 1 / 1;
        overflow: hidden;
      }
      img {
        height: 100%;
        width: 100%;
        object-fit: cover;
      }
    }
  }
  .checkbox {
    @layer daisyui.component {
      border: var(--border) solid var(--input-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
      }
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: var(--radius-selector);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      color: var(--color-base-content);
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
      transition: background-color 0.2s, box-shadow 0.2s;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      &:before {
        --tw-content: "";
        content: var(--tw-content);
        display: block;
        width: 100%;
        height: 100%;
        rotate: 45deg;
        background-color: currentcolor;
        opacity: 0%;
        transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
        transition-delay: 0.1s;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
        box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
        font-size: 1rem;
        line-height: 0.75;
      }
      &:focus-visible {
        outline: 2px solid var(--input-color, currentColor);
        outline-offset: 2px;
      }
      &:checked, &[aria-checked="true"] {
        background-color: var(--input-color, #0000);
        box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        &:before {
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
          opacity: 100%;
        }
        @media (forced-colors: active) {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
        @media print {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
      }
      &:indeterminate {
        background-color: var( --input-color, var(--color-base-content) );
        @supports (color: color-mix(in lab, red, red)) {
          background-color: var( --input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000) );
        }
        &:before {
          rotate: 0deg;
          opacity: 100%;
          translate: 0 -35%;
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
        }
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        cursor: not-allowed;
        opacity: 20%;
      }
    }
  }
  .radio {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: calc(infinity * 1px);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      border: var(--border) solid var(--input-color, currentColor);
      @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
      }
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      color: var(--input-color, currentColor);
      &:before {
        display: block;
        width: 100%;
        height: 100%;
        border-radius: calc(infinity * 1px);
        --tw-content: "";
        content: var(--tw-content);
        background-size: auto, calc(var(--noise) * 100%);
        background-image: none, var(--fx-noise);
      }
      &:focus-visible {
        outline: 2px solid currentColor;
      }
      &:checked, &[aria-checked="true"] {
        border-color: currentcolor;
        background-color: var(--color-base-100);
        @media (prefers-reduced-motion: no-preference) {
          animation: radio 0.2s ease-out;
        }
        &:before {
          background-color: currentcolor;
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        }
        @media (forced-colors: active) {
          &:before {
            outline-style: var(--tw-outline-style);
            outline-width: 1px;
            outline-offset: calc(1px * -1);
          }
        }
        @media print {
          &:before {
            outline: 0.25rem solid;
            outline-offset: -1rem;
          }
        }
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        cursor: not-allowed;
        opacity: 20%;
      }
    }
  }
  .rating {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      vertical-align: middle;
      & input {
        border: none;
        appearance: none;
      }
      :where(*) {
        height: calc(0.25rem * 6);
        width: calc(0.25rem * 6);
        border-radius: 0;
        background-color: var(--color-base-content);
        opacity: 20%;
        @media (prefers-reduced-motion: no-preference) {
          animation: rating 0.25s ease-out;
        }
        &:is(input) {
          cursor: pointer;
        }
      }
      & .rating-hidden {
        width: calc(0.25rem * 2);
        background-color: transparent;
      }
      input[type="radio"]:checked {
        background-image: none;
      }
      * {
        &:checked, &[aria-checked="true"], &[aria-current="true"], &:has(~ *:checked, ~ *[aria-checked="true"], ~ *[aria-current="true"]) {
          opacity: 100%;
        }
        &:focus-visible {
          scale: 1.1;
          @media (prefers-reduced-motion: no-preference) {
            transition: scale 0.2s ease-out;
          }
        }
      }
      & *:active:focus {
        animation: none;
        scale: 1.1;
      }
    }
    @layer daisyui.modifier {
      &.rating-xs :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 4);
        height: calc(0.25rem * 4);
      }
      &.rating-sm :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 5);
        height: calc(0.25rem * 5);
      }
      &.rating-md :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 6);
        height: calc(0.25rem * 6);
      }
      &.rating-lg :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 7);
        height: calc(0.25rem * 7);
      }
      &.rating-xl :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 8);
        height: calc(0.25rem * 8);
      }
    }
  }
  .navbar {
    @layer daisyui.component {
      display: flex;
      width: 100%;
      align-items: center;
      padding: 0.5rem;
      min-height: 4rem;
    }
    :where(&) {
      @layer daisyui.modifier {
        position: relative;
      }
    }
  }
  .drawer {
    @layer daisyui.component {
      position: relative;
      display: grid;
      width: 100%;
      grid-auto-columns: max-content auto;
    }
  }
  .card {
    @layer daisyui.component {
      position: relative;
      display: flex;
      flex-direction: column;
      border-radius: var(--radius-box);
      outline-width: 2px;
      transition: outline 0.2s ease-in-out;
      outline: 0 solid #0000;
      outline-offset: 2px;
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible {
        outline-color: currentColor;
      }
      :where(figure:first-child) {
        overflow: hidden;
        border-start-start-radius: inherit;
        border-start-end-radius: inherit;
        border-end-start-radius: unset;
        border-end-end-radius: unset;
      }
      :where(figure:last-child) {
        overflow: hidden;
        border-start-start-radius: unset;
        border-start-end-radius: unset;
        border-end-start-radius: inherit;
        border-end-end-radius: inherit;
      }
      figure {
        display: flex;
        align-items: center;
        justify-content: center;
      }
      &:has(> input:is(input[type="checkbox"], input[type="radio"])) {
        cursor: pointer;
        user-select: none;
      }
      &:has(> :checked) {
        outline: 2px solid currentColor;
      }
    }
  }
  .stats {
    @layer daisyui.component {
      position: relative;
      display: inline-grid;
      grid-auto-flow: column;
      overflow-x: auto;
      border-radius: var(--radius-box);
    }
  }
  .progress {
    @layer daisyui.component {
      position: relative;
      height: calc(0.25rem * 2);
      width: 100%;
      appearance: none;
      overflow: hidden;
      border-radius: var(--radius-box);
      background-color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, currentcolor 20%, transparent);
      }
      color: var(--color-base-content);
      &:indeterminate {
        background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
        background-size: 200%;
        background-position-x: 15%;
        @media (prefers-reduced-motion: no-preference) {
          animation: progress 5s ease-in-out infinite;
        }
        @supports (-moz-appearance: none) {
          &::-moz-progress-bar {
            background-color: transparent;
            @media (prefers-reduced-motion: no-preference) {
              animation: progress 5s ease-in-out infinite;
              background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
              background-size: 200%;
              background-position-x: 15%;
            }
          }
        }
      }
      @supports (-moz-appearance: none) {
        &::-moz-progress-bar {
          border-radius: var(--radius-box);
          background-color: currentcolor;
        }
      }
      @supports (-webkit-appearance: none) {
        &::-webkit-progress-bar {
          border-radius: var(--radius-box);
          background-color: transparent;
        }
        &::-webkit-progress-value {
          border-radius: var(--radius-box);
          background-color: currentColor;
        }
      }
    }
  }
  .modal-toggle {
    @layer daisyui.component {
      position: fixed;
      height: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      appearance: none;
      opacity: 0%;
    }
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .relative\! {
    position: relative !important;
  }
  .static {
    position: static;
  }
  .sticky {
    position: sticky;
  }
  .inset-0 {
    inset: calc(var(--spacing) * 0);
  }
  .inset-x-0 {
    inset-inline: calc(var(--spacing) * 0);
  }
  .inset-y-0 {
    inset-block: calc(var(--spacing) * 0);
  }
  .toast-center {
    @layer daisyui.modifier {
      inset-inline-start: calc(1/2 * 100%);
      inset-inline-end: calc(1/2 * 100%);
      --toast-x: -50%;
    }
  }
  .dropdown-right {
    @layer daisyui.modifier {
      --anchor-h: right;
      --anchor-v: span-bottom;
      .dropdown-content {
        inset-inline-start: 100%;
        top: calc(0.25rem * 0);
        bottom: auto;
        transform-origin: 0;
      }
    }
  }
  .chat-end {
    @layer daisyui.modifier {
      place-items: end;
      grid-template-columns: 1fr auto;
      .chat-header {
        grid-column-start: 1;
      }
      .chat-footer {
        grid-column-start: 1;
      }
      .chat-image {
        grid-column-start: 2;
      }
      .chat-bubble {
        grid-column-start: 1;
        border-end-end-radius: 0;
        &:before {
          transform: rotateY(180deg);
          inset-inline-start: 100%;
        }
        [dir="rtl"] &:before {
          transform: rotateY(0deg);
        }
      }
    }
  }
  .chat-start {
    @layer daisyui.modifier {
      place-items: start;
      grid-template-columns: auto 1fr;
      .chat-header {
        grid-column-start: 2;
      }
      .chat-footer {
        grid-column-start: 2;
      }
      .chat-image {
        grid-column-start: 1;
      }
      .chat-bubble {
        grid-column-start: 2;
        border-end-start-radius: 0;
        &:before {
          transform: rotateY(0deg);
          inset-inline-start: -0.75rem;
        }
        [dir="rtl"] &:before {
          transform: rotateY(180deg);
        }
      }
    }
  }
  .dropdown-left {
    @layer daisyui.modifier {
      --anchor-h: left;
      --anchor-v: span-bottom;
      .dropdown-content {
        inset-inline-end: 100%;
        top: calc(0.25rem * 0);
        bottom: auto;
        transform-origin: 100%;
      }
    }
  }
  .dropdown-end {
    @layer daisyui.modifier {
      --anchor-h: span-left;
      :where(.dropdown-content) {
        inset-inline-end: calc(0.25rem * 0);
        translate: 0 0;
        [dir="rtl"] & {
          translate: 0 0;
        }
      }
      &.dropdown-left {
        --anchor-h: left;
        --anchor-v: span-top;
        .dropdown-content {
          top: auto;
          bottom: calc(0.25rem * 0);
        }
      }
      &.dropdown-right {
        --anchor-h: right;
        --anchor-v: span-top;
        .dropdown-content {
          top: auto;
          bottom: calc(0.25rem * 0);
        }
      }
    }
  }
  .dropdown-bottom {
    @layer daisyui.modifier {
      --anchor-v: bottom;
      .dropdown-content {
        top: 100%;
        bottom: auto;
        transform-origin: top;
      }
    }
  }
  .dropdown-top {
    @layer daisyui.modifier {
      --anchor-v: top;
      .dropdown-content {
        top: auto;
        bottom: 100%;
        transform-origin: bottom;
      }
    }
  }
  .toast-bottom {
    @layer daisyui.modifier {
      top: auto;
      bottom: calc(0.25rem * 4);
      --toast-y: 0;
    }
  }
  .-top-40 {
    top: calc(var(--spacing) * -40);
  }
  .top-0 {
    top: calc(var(--spacing) * 0);
  }
  .top-2 {
    top: calc(var(--spacing) * 2);
  }
  .top-20 {
    top: calc(var(--spacing) * 20);
  }
  .top-\[calc\(var\(--header-height\)_\+_1\.5rem\)\] {
    top: calc(var(--header-height) + 1.5rem);
  }
  .top-px {
    top: 1px;
  }
  .right-0 {
    right: calc(var(--spacing) * 0);
  }
  .right-4 {
    right: calc(var(--spacing) * 4);
  }
  .bottom-4 {
    bottom: calc(var(--spacing) * 4);
  }
  .bottom-24 {
    bottom: calc(var(--spacing) * 24);
  }
  .-left-\[calc\(50\%-11rem\)\] {
    left: calc(calc(50% - 11rem) * -1);
  }
  .left-\[calc\(50\%-11rem\)\] {
    left: calc(50% - 11rem);
  }
  .file-input {
    @layer daisyui.component {
      cursor: pointer;
      cursor: pointer;
      border: var(--border) solid #0000;
      display: inline-flex;
      appearance: none;
      align-items: center;
      background-color: var(--color-base-100);
      vertical-align: middle;
      webkit-user-select: none;
      user-select: none;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      padding-inline-end: 0.75rem;
      font-size: 0.875rem;
      line-height: 2;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      &::file-selector-button {
        margin-inline-end: calc(0.25rem * 4);
        cursor: pointer;
        padding-inline: calc(0.25rem * 4);
        webkit-user-select: none;
        user-select: none;
        height: calc(100% + var(--border) * 2);
        margin-block: calc(var(--border) * -1);
        margin-inline-start: calc(var(--border) * -1);
        font-size: 0.875rem;
        color: var(--btn-fg);
        border-width: var(--border);
        border-style: solid;
        border-color: var(--btn-border);
        border-start-start-radius: calc(var(--join-ss, var(--radius-field) - var(--border)));
        border-end-start-radius: calc(var(--join-es, var(--radius-field) - var(--border)));
        font-weight: 600;
        background-color: var(--btn-bg);
        background-size: calc(var(--noise) * 100%);
        background-image: var(--btn-noise);
        text-shadow: 0 0.5px oklch(1 0 0 / calc(var(--depth) * 0.15));
        box-shadow: 0 0.5px 0 0.5px white inset, var(--btn-shadow);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 0.5px 0 0.5px color-mix( in oklab, color-mix(in oklab, white 30%, var(--btn-bg)) calc(var(--depth) * 20%), #0000 ) inset, var(--btn-shadow);
        }
        --size: calc(var(--size-field, 0.25rem) * 10);
        --btn-bg: var(--btn-color, var(--color-base-200));
        --btn-fg: var(--color-base-content);
        --btn-border: var(--btn-bg);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-border: color-mix(in oklab, var(--btn-bg), #000 5%);
        }
        --btn-shadow: 0 3px 2px -2px var(--btn-bg),
        0 4px 3px -2px var(--btn-bg);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) 30%, #0000),
        0 4px 3px -2px color-mix(in oklab, var(--btn-bg) 30%, #0000);
        }
        --btn-noise: var(--fx-noise);
      }
      &:focus {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) 10%, #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
      }
      &:has(> input[disabled]), &:is(:disabled, [disabled]) {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
        box-shadow: none;
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        &::file-selector-button {
          cursor: not-allowed;
          border-color: var(--color-base-200);
          background-color: var(--color-base-200);
          --btn-border: #0000;
          --btn-noise: none;
          --btn-fg: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
          }
        }
      }
    }
  }
  .hero-content {
    @layer daisyui.component {
      isolation: isolate;
      display: flex;
      max-width: 80rem;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 4);
      padding: calc(0.25rem * 4);
    }
  }
  .textarea {
    @layer daisyui.component {
      border: var(--border) solid #0000;
      min-height: calc(0.25rem * 20);
      flex-shrink: 1;
      appearance: none;
      border-radius: var(--radius-field);
      background-color: var(--color-base-100);
      padding-block: calc(0.25rem * 2);
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      padding-inline-start: 0.75rem;
      padding-inline-end: 0.75rem;
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      textarea {
        appearance: none;
        background-color: transparent;
        border: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
      }
      @media (pointer: coarse) {
        @supports (-webkit-touch-callout: none) {
          &:focus, &:focus-within {
            --font-size: 1rem;
          }
        }
      }
      &:has(> textarea[disabled]), &:is(:disabled, [disabled]) {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
        box-shadow: none;
      }
      &:has(> textarea[disabled]) > textarea[disabled] {
        cursor: not-allowed;
      }
    }
  }
  .btn-active {
    @layer daisyui.modifier {
      --btn-bg: var(--btn-color, var(--color-base-200));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
      }
      --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
      isolation: isolate;
    }
  }
  .isolate {
    isolation: isolate;
  }
  .isolation-auto {
    isolation: auto;
  }
  .stack {
    @layer daisyui.component {
      display: inline-grid;
      grid-template-columns: 3px 4px 1fr 4px 3px;
      grid-template-rows: 3px 4px 1fr 4px 3px;
      & > * {
        height: 100%;
        width: 100%;
        &:nth-child(n + 2) {
          width: 100%;
          opacity: 70%;
        }
        &:nth-child(2) {
          z-index: 2;
          opacity: 90%;
        }
        &:nth-child(1) {
          z-index: 3;
          width: 100%;
        }
      }
    }
    @layer daisyui.modifier {
      &, &.stack-bottom {
        > * {
          grid-column: 3 / 4;
          grid-row: 3 / 6;
          &:nth-child(2) {
            grid-column: 2 / 5;
            grid-row: 2 / 5;
          }
          &:nth-child(1) {
            grid-column: 1 / 6;
            grid-row: 1 / 4;
          }
        }
      }
      &.stack-top {
        > * {
          grid-column: 3 / 4;
          grid-row: 1 / 4;
          &:nth-child(2) {
            grid-column: 2 / 5;
            grid-row: 2 / 5;
          }
          &:nth-child(1) {
            grid-column: 1 / 6;
            grid-row: 3 / 6;
          }
        }
      }
      &.stack-start {
        > * {
          grid-column: 1 / 4;
          grid-row: 3 / 4;
          &:nth-child(2) {
            grid-column: 2 / 5;
            grid-row: 2 / 5;
          }
          &:nth-child(1) {
            grid-column: 3 / 6;
            grid-row: 1 / 6;
          }
        }
      }
      &.stack-end {
        > * {
          grid-column: 3 / 6;
          grid-row: 3 / 4;
          &:nth-child(2) {
            grid-column: 2 / 5;
            grid-row: 2 / 5;
          }
          &:nth-child(1) {
            grid-column: 1 / 4;
            grid-row: 1 / 6;
          }
        }
      }
    }
  }
  .modal-backdrop {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
      display: grid;
      align-self: stretch;
      justify-self: stretch;
      color: transparent;
      z-index: -1;
      button {
        cursor: pointer;
      }
    }
  }
  .-z-10 {
    z-index: calc(10 * -1);
  }
  .z-0 {
    z-index: 0;
  }
  .z-10 {
    z-index: 10;
  }
  .z-20 {
    z-index: 20;
  }
  .z-50 {
    z-index: 50;
  }
  .z-\[999\] {
    z-index: 999;
  }
  .tab-content {
    @layer daisyui.component {
      order: var(--tabcontent-order);
      display: none;
      border-color: transparent;
      --tabcontent-radius-ss: var(--radius-box);
      --tabcontent-radius-se: var(--radius-box);
      --tabcontent-radius-es: var(--radius-box);
      --tabcontent-radius-ee: var(--radius-box);
      --tabcontent-order: 1;
      width: 100%;
      margin: var(--tabcontent-margin);
      border-width: var(--border);
      border-start-start-radius: var(--tabcontent-radius-ss);
      border-start-end-radius: var(--tabcontent-radius-se);
      border-end-start-radius: var(--tabcontent-radius-es);
      border-end-end-radius: var(--tabcontent-radius-ee);
    }
  }
  .col-span-5 {
    grid-column: span 5 / span 5;
  }
  .timeline-end {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-column-end: 4;
      grid-row-start: 3;
      grid-row-end: 4;
      margin: calc(0.25rem * 1);
      align-self: flex-start;
      justify-self: center;
    }
  }
  .timeline-start {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-column-end: 4;
      grid-row-start: 1;
      grid-row-end: 2;
      margin: calc(0.25rem * 1);
      align-self: flex-end;
      justify-self: center;
    }
  }
  .timeline-horizontal {
    @layer daisyui.modifier {
      flex-direction: row;
      > li {
        align-items: center;
        > hr {
          height: calc(0.25rem * 1);
          width: 100%;
          &:first-child {
            grid-column-start: 1;
            grid-row-start: 2;
          }
          &:last-child {
            grid-column-start: 3;
            grid-column-end: none;
            grid-row-start: 2;
            grid-row-end: auto;
          }
        }
      }
      .timeline-start {
        grid-column-start: 1;
        grid-column-end: 4;
        grid-row-start: 1;
        grid-row-end: 2;
        align-self: flex-end;
        justify-self: center;
      }
      .timeline-end {
        grid-column-start: 1;
        grid-column-end: 4;
        grid-row-start: 3;
        grid-row-end: 4;
        align-self: flex-start;
        justify-self: center;
      }
      &:has(.timeline-middle) {
        > li {
          > hr {
            &:first-child {
              border-start-start-radius: 0;
              border-end-start-radius: 0;
              border-start-end-radius: var(--radius-selector);
              border-end-end-radius: var(--radius-selector);
            }
            &:last-child {
              border-start-start-radius: var(--radius-selector);
              border-end-start-radius: var(--radius-selector);
              border-start-end-radius: 0;
              border-end-end-radius: 0;
            }
          }
        }
      }
      &:not(:has(.timeline-middle)) {
        :first-child {
          > hr:last-child {
            border-start-start-radius: var(--radius-selector);
            border-end-start-radius: var(--radius-selector);
            border-start-end-radius: 0;
            border-end-end-radius: 0;
          }
        }
        :last-child {
          > hr:first-child {
            border-start-start-radius: 0;
            border-end-start-radius: 0;
            border-start-end-radius: var(--radius-selector);
            border-end-end-radius: var(--radius-selector);
          }
        }
      }
    }
  }
  .timeline-vertical {
    @layer daisyui.modifier {
      flex-direction: column;
      > li {
        justify-items: center;
        --timeline-row-start: minmax(0, 1fr);
        --timeline-row-end: minmax(0, 1fr);
        > hr {
          height: 100%;
          width: calc(0.25rem * 1);
          &:first-child {
            grid-column-start: 2;
            grid-row-start: 1;
          }
          &:last-child {
            grid-column-start: 2;
            grid-column-end: auto;
            grid-row-start: 3;
            grid-row-end: none;
          }
        }
      }
      .timeline-start {
        grid-column-start: 1;
        grid-column-end: 2;
        grid-row-start: 1;
        grid-row-end: 4;
        align-self: center;
        justify-self: flex-end;
      }
      .timeline-end {
        grid-column-start: 3;
        grid-column-end: 4;
        grid-row-start: 1;
        grid-row-end: 4;
        align-self: center;
        justify-self: flex-start;
      }
      &:has(.timeline-middle) {
        > li {
          > hr {
            &:first-child {
              border-top-left-radius: 0;
              border-top-right-radius: 0;
              border-bottom-right-radius: var(--radius-selector);
              border-bottom-left-radius: var(--radius-selector);
            }
            &:last-child {
              border-top-left-radius: var(--radius-selector);
              border-top-right-radius: var(--radius-selector);
              border-bottom-right-radius: 0;
              border-bottom-left-radius: 0;
            }
          }
        }
      }
      &:not(:has(.timeline-middle)) {
        :first-child {
          > hr:last-child {
            border-top-left-radius: var(--radius-selector);
            border-top-right-radius: var(--radius-selector);
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
          }
        }
        :last-child {
          > hr:first-child {
            border-top-left-radius: 0;
            border-top-right-radius: 0;
            border-bottom-right-radius: var(--radius-selector);
            border-bottom-left-radius: var(--radius-selector);
          }
        }
      }
      &.timeline-snap-icon {
        > li {
          --timeline-col-start: minmax(0, 1fr);
          --timeline-row-start: 0.5rem;
        }
      }
    }
  }
  .timeline-compact {
    @layer daisyui.modifier {
      --timeline-row-start: 0;
      .timeline-start {
        grid-column-start: 1;
        grid-column-end: 4;
        grid-row-start: 3;
        grid-row-end: 4;
        align-self: flex-start;
        justify-self: center;
      }
      li:has(.timeline-start) {
        .timeline-end {
          grid-column-start: none;
          grid-row-start: auto;
        }
      }
      &.timeline-vertical {
        > li {
          --timeline-col-start: 0;
        }
        .timeline-start {
          grid-column-start: 3;
          grid-column-end: 4;
          grid-row-start: 1;
          grid-row-end: 4;
          align-self: center;
          justify-self: flex-start;
        }
        li:has(.timeline-start) {
          .timeline-end {
            grid-column-start: auto;
            grid-row-start: none;
          }
        }
      }
    }
  }
  .stat-figure {
    @layer daisyui.component {
      grid-column-start: 2;
      grid-row: span 3 / span 3;
      grid-row-start: 1;
      place-self: center;
      justify-self: flex-end;
    }
  }
  .hero {
    @layer daisyui.component {
      display: grid;
      width: 100%;
      place-items: center;
      background-size: cover;
      background-position: center;
      & > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
    }
  }
  .hero-overlay {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
      height: 100%;
      width: 100%;
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 50%, transparent);
      }
    }
  }
  .modal-box {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
      max-height: 100vh;
      width: calc(11/12 * 100%);
      max-width: 32rem;
      background-color: var(--color-base-100);
      padding: calc(0.25rem * 6);
      transition: translate 0.3s ease-out, scale 0.3s ease-out, opacity 0.2s ease-out 0.05s, box-shadow 0.3s ease-out;
      border-top-left-radius: var(--modal-tl, var(--radius-box));
      border-top-right-radius: var(--modal-tr, var(--radius-box));
      border-bottom-left-radius: var(--modal-bl, var(--radius-box));
      border-bottom-right-radius: var(--modal-br, var(--radius-box));
      scale: 95%;
      opacity: 0;
      box-shadow: oklch(0% 0 0/ 0.25) 0px 25px 50px -12px;
      overflow-y: auto;
      overscroll-behavior: contain;
    }
  }
  .drawer-content {
    @layer daisyui.component {
      grid-column-start: 2;
      grid-row-start: 1;
      min-width: calc(0.25rem * 0);
    }
  }
  .timeline-middle {
    @layer daisyui.component {
      grid-column-start: 2;
      grid-row-start: 2;
    }
  }
  .drawer-end {
    @layer daisyui.modifier.placement {
      grid-auto-columns: auto max-content;
      > .drawer-toggle {
        & ~ .drawer-content {
          grid-column-start: 1;
        }
        & ~ .drawer-side {
          grid-column-start: 2;
          justify-items: end;
        }
        & ~ .drawer-side > *:not(.drawer-overlay) {
          translate: 100%;
          [dir="rtl"] & {
            translate: -100%;
          }
        }
        &:checked ~ .drawer-side > *:not(.drawer-overlay) {
          translate: 0%;
        }
      }
    }
  }
  .stat-value {
    @layer daisyui.component {
      grid-column-start: 1;
      white-space: nowrap;
      font-size: 2rem;
      font-weight: 800;
    }
  }
  .stat-desc {
    @layer daisyui.component {
      grid-column-start: 1;
      white-space: nowrap;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }
      font-size: 0.75rem;
    }
  }
  .stat-title {
    @layer daisyui.component {
      grid-column-start: 1;
      white-space: nowrap;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }
      font-size: 0.75rem;
    }
  }
  .stat-actions {
    @layer daisyui.component {
      grid-column-start: 1;
      white-space: nowrap;
    }
  }
  .chat-image {
    @layer daisyui.component {
      grid-row: span 2 / span 2;
      align-self: flex-end;
    }
  }
  .row-span-3 {
    grid-row: span 3 / span 3;
  }
  .chat-footer {
    @layer daisyui.component {
      grid-row-start: 3;
      display: flex;
      gap: calc(0.25rem * 1);
      font-size: 0.6875rem;
    }
  }
  .chat-header {
    @layer daisyui.component {
      grid-row-start: 1;
      display: flex;
      gap: calc(0.25rem * 1);
      font-size: 0.6875rem;
    }
  }
  .row-start-1 {
    grid-row-start: 1;
  }
  .float-left {
    float: left;
  }
  .float-none {
    float: none;
  }
  .float-right {
    float: right;
  }
  .clear-both {
    clear: both;
  }
  .clear-left {
    clear: left;
  }
  .clear-none {
    clear: none;
  }
  .clear-right {
    clear: right;
  }
  .container {
    width: 100%;
    @media (width >= 40rem) {
      max-width: 40rem;
    }
    @media (width >= 48rem) {
      max-width: 48rem;
    }
    @media (width >= 64rem) {
      max-width: 64rem;
    }
    @media (width >= 80rem) {
      max-width: 80rem;
    }
    @media (width >= 96rem) {
      max-width: 96rem;
    }
  }
  .divider {
    @layer daisyui.component {
      display: flex;
      height: calc(0.25rem * 4);
      flex-direction: row;
      align-items: center;
      align-self: stretch;
      white-space: nowrap;
      margin: var(--divider-m, 1rem 0);
      --divider-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
      &:before, &:after {
        content: "";
        height: calc(0.25rem * 0.5);
        width: 100%;
        flex-grow: 1;
        background-color: var(--divider-color);
      }
      @media print {
        &:before, &:after {
          border: 0.5px solid;
        }
      }
      &:not(:empty) {
        gap: calc(0.25rem * 4);
      }
    }
  }
  .m-auto {
    margin: auto;
  }
  .filter {
    @layer daisyui.component {
      display: flex;
      flex-wrap: wrap;
      input[type="radio"] {
        width: auto;
      }
      input {
        overflow: hidden;
        opacity: 100%;
        scale: 1;
        transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
        &:not(:last-child) {
          margin-inline-end: calc(0.25rem * 1);
        }
        &.filter-reset {
          aspect-ratio: 1 / 1;
          &::after {
            content: "×";
          }
        }
      }
      &:not(:has(input:checked:not(.filter-reset))) {
        .filter-reset, input[type="reset"] {
          scale: 0;
          border-width: 0;
          margin-inline: calc(0.25rem * 0);
          width: calc(0.25rem * 0);
          padding-inline: calc(0.25rem * 0);
          opacity: 0%;
        }
      }
      &:has(input:checked:not(.filter-reset)) {
        input:not(:checked, .filter-reset, input[type="reset"]) {
          scale: 0;
          border-width: 0;
          margin-inline: calc(0.25rem * 0);
          width: calc(0.25rem * 0);
          padding-inline: calc(0.25rem * 0);
          opacity: 0%;
        }
      }
    }
  }
  .filter\! {
    @layer daisyui.component {
      display: flex !important;
      flex-wrap: wrap !important;
      input[type="radio"] {
        width: auto !important;
      }
      input {
        overflow: hidden !important;
        opacity: 100% !important;
        scale: 1 !important;
        transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s !important;
        &:not(:last-child) {
          margin-inline-end: calc(0.25rem * 1) !important;
        }
        &.filter-reset {
          aspect-ratio: 1 / 1 !important;
          &::after {
            content: "×" !important;
          }
        }
      }
      &:not(:has(input:checked:not(.filter-reset))) {
        .filter-reset, input[type="reset"] {
          scale: 0 !important;
          border-width: 0 !important;
          margin-inline: calc(0.25rem * 0) !important;
          width: calc(0.25rem * 0) !important;
          padding-inline: calc(0.25rem * 0) !important;
          opacity: 0% !important;
        }
      }
      &:has(input:checked:not(.filter-reset)) {
        input:not(:checked, .filter-reset, input[type="reset"]) {
          scale: 0 !important;
          border-width: 0 !important;
          margin-inline: calc(0.25rem * 0) !important;
          width: calc(0.25rem * 0) !important;
          padding-inline: calc(0.25rem * 0) !important;
          opacity: 0% !important;
        }
      }
    }
  }
  .mx-2 {
    margin-inline: calc(var(--spacing) * 2);
  }
  .mx-auto {
    margin-inline: auto;
  }
  .file-input-ghost {
    @layer daisyui.modifier {
      background-color: transparent;
      transition: background-color 0.2s;
      box-shadow: none;
      border-color: #0000;
      &::file-selector-button {
        margin-inline-start: calc(0.25rem * 0);
        margin-inline-end: calc(0.25rem * 4);
        height: 100%;
        cursor: pointer;
        padding-inline: calc(0.25rem * 4);
        webkit-user-select: none;
        user-select: none;
        margin-block: 0;
        border-start-end-radius: calc(var(--join-ss, var(--radius-field) - var(--border)));
        border-end-end-radius: calc(var(--join-es, var(--radius-field) - var(--border)));
      }
      &:focus, &:focus-within {
        background-color: var(--color-base-100);
        color: var(--color-base-content);
        border-color: #0000;
        box-shadow: none;
      }
    }
  }
  .input-lg {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 12);
      font-size: max(var(--font-size, 1.125rem), 1.125rem);
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -3);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
    }
  }
  .input-md {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 10);
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -3);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
    }
  }
  .input-sm {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 8);
      font-size: max(var(--font-size, 0.75rem), 0.75rem);
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -2);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
    }
  }
  .input-xs {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 6);
      font-size: max(var(--font-size, 0.6875rem), 0.6875rem);
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -1);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
    }
  }
  .my-2 {
    margin-block: calc(var(--spacing) * 2);
  }
  .my-4 {
    margin-block: calc(var(--spacing) * 4);
  }
  .my-5 {
    margin-block: calc(var(--spacing) * 5);
  }
  .my-8 {
    margin-block: calc(var(--spacing) * 8);
  }
  .my-10 {
    margin-block: calc(var(--spacing) * 10);
  }
  .label {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      gap: calc(0.25rem * 1.5);
      white-space: nowrap;
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 60%, transparent);
      }
      &:has(input) {
        cursor: pointer;
      }
      &:is(.input > *, .select > *) {
        display: flex;
        height: calc(100% - 0.5rem);
        align-items: center;
        padding-inline: calc(0.25rem * 3);
        white-space: nowrap;
        font-size: inherit;
        &:first-child {
          margin-inline-start: calc(0.25rem * -3);
          margin-inline-end: calc(0.25rem * 3);
          border-inline-end: var(--border) solid currentColor;
          @supports (color: color-mix(in lab, red, red)) {
            border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
          }
        }
        &:last-child {
          margin-inline-start: calc(0.25rem * 3);
          margin-inline-end: calc(0.25rem * -3);
          border-inline-start: var(--border) solid currentColor;
          @supports (color: color-mix(in lab, red, red)) {
            border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
          }
        }
      }
    }
  }
  .steps-vertical {
    @layer daisyui.modifier {
      grid-auto-rows: 1fr;
      grid-auto-flow: row;
      .step {
        display: grid;
        grid-template-columns: repeat(2, minmax(0, 1fr));
        grid-template-columns: 40px 1fr;
        grid-template-rows: repeat(1, minmax(0, 1fr));
        grid-template-rows: auto;
        gap: 0.5rem;
        min-height: 4rem;
        justify-items: start;
        &:before {
          height: 100%;
          width: calc(0.25rem * 2);
          translate: -50% -50%;
          margin-inline-start: 50%;
        }
        [dir="rtl"] &:before {
          translate: 50% -50%;
        }
      }
    }
  }
  .steps-horizontal {
    @layer daisyui.modifier {
      grid-auto-columns: 1fr;
      display: inline-grid;
      grid-auto-flow: column;
      overflow: hidden;
      overflow-x: auto;
      .step {
        display: grid;
        grid-template-columns: repeat(1, minmax(0, 1fr));
        grid-template-columns: auto;
        grid-template-rows: repeat(2, minmax(0, 1fr));
        grid-template-rows: 40px 1fr;
        place-items: center;
        text-align: center;
        min-width: 4rem;
        &:before {
          height: calc(0.25rem * 2);
          width: 100%;
          translate: 0;
          margin-inline-start: -100%;
        }
        [dir="rtl"] &:before {
          translate: 0;
        }
      }
    }
  }
  .join-horizontal {
    flex-direction: row;
    > .join-item:first-child {
      --join-ss: var(--radius-field);
      --join-se: 0;
      --join-es: var(--radius-field);
      --join-ee: 0;
    }
    :first-child:not(:last-child) {
      .join-item {
        --join-ss: var(--radius-field);
        --join-se: 0;
        --join-es: var(--radius-field);
        --join-ee: 0;
      }
    }
    > .join-item:last-child {
      --join-ss: 0;
      --join-se: var(--radius-field);
      --join-es: 0;
      --join-ee: var(--radius-field);
    }
    :last-child:not(:first-child) {
      .join-item {
        --join-ss: 0;
        --join-se: var(--radius-field);
        --join-es: 0;
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:only-child {
      --join-ss: var(--radius-field);
      --join-se: var(--radius-field);
      --join-es: var(--radius-field);
      --join-ee: var(--radius-field);
    }
    :only-child {
      .join-item {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
    .join-item {
      &:where(*:not(:first-child)) {
        margin-inline-start: calc(var(--border, 1px) * -1);
        margin-block-start: 0;
      }
    }
  }
  .join-vertical {
    flex-direction: column;
    > .join-item:first-child {
      --join-ss: var(--radius-field);
      --join-se: var(--radius-field);
      --join-es: 0;
      --join-ee: 0;
    }
    :first-child:not(:last-child) {
      .join-item {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: 0;
        --join-ee: 0;
      }
    }
    > .join-item:last-child {
      --join-ss: 0;
      --join-se: 0;
      --join-es: var(--radius-field);
      --join-ee: var(--radius-field);
    }
    :last-child:not(:first-child) {
      .join-item {
        --join-ss: 0;
        --join-se: 0;
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:only-child {
      --join-ss: var(--radius-field);
      --join-se: var(--radius-field);
      --join-es: var(--radius-field);
      --join-ee: var(--radius-field);
    }
    :only-child {
      .join-item {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
    .join-item {
      &:where(*:not(:first-child)) {
        margin-inline-start: 0;
        margin-block-start: calc(var(--border, 1px) * -1);
      }
    }
  }
  .join-item {
    &:where(*:not(:first-child, :disabled, [disabled], .btn-disabled)) {
      margin-inline-start: calc(var(--border, 1px) * -1);
      margin-block-start: 0;
    }
    &:where(*:is(:disabled, [disabled], .btn-disabled)) {
      border-width: var(--border, 1px) 0 var(--border, 1px) var(--border, 1px);
    }
  }
  .modal-action {
    @layer daisyui.component {
      margin-top: calc(0.25rem * 6);
      display: flex;
      justify-content: flex-end;
      gap: calc(0.25rem * 2);
    }
  }
  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }
  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }
  .mt-10 {
    margin-top: calc(var(--spacing) * 10);
  }
  .mt-12 {
    margin-top: calc(var(--spacing) * 12);
  }
  .mt-16 {
    margin-top: calc(var(--spacing) * 16);
  }
  .mt-20 {
    margin-top: calc(var(--spacing) * 20);
  }
  .breadcrumbs {
    @layer daisyui.component {
      max-width: 100%;
      overflow-x: auto;
      padding-block: calc(0.25rem * 2);
      > menu, > ul, > ol {
        display: flex;
        min-height: min-content;
        align-items: center;
        white-space: nowrap;
        > li {
          display: flex;
          align-items: center;
          > * {
            display: flex;
            cursor: pointer;
            align-items: center;
            gap: calc(0.25rem * 2);
            &:hover {
              @media (hover: hover) {
                text-decoration-line: underline;
              }
            }
            &:focus {
              --tw-outline-style: none;
              outline-style: none;
              @media (forced-colors: active) {
                outline: 2px solid transparent;
                outline-offset: 2px;
              }
            }
            &:focus-visible {
              outline: 2px solid currentColor;
              outline-offset: 2px;
            }
          }
          & + *:before {
            content: "";
            margin-right: calc(0.25rem * 3);
            margin-left: calc(0.25rem * 2);
            display: block;
            height: calc(0.25rem * 1.5);
            width: calc(0.25rem * 1.5);
            opacity: 40%;
            rotate: 45deg;
            border-top: 1px solid;
            border-right: 1px solid;
            background-color: #0000;
          }
          [dir="rtl"] & + *:before {
            rotate: -135deg;
          }
        }
      }
    }
  }
  .mr-1 {
    margin-right: calc(var(--spacing) * 1);
  }
  .mr-2 {
    margin-right: calc(var(--spacing) * 2);
  }
  .mr-3 {
    margin-right: calc(var(--spacing) * 3);
  }
  .mr-4 {
    margin-right: calc(var(--spacing) * 4);
  }
  .mr-auto {
    margin-right: auto;
  }
  .fieldset-legend {
    @layer daisyui.component {
      margin-bottom: calc(0.25rem * -1);
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: calc(0.25rem * 2);
      padding-block: calc(0.25rem * 2);
      color: var(--color-base-content);
      font-weight: 600;
    }
  }
  .footer-title {
    @layer daisyui.component {
      margin-bottom: calc(0.25rem * 2);
      text-transform: uppercase;
      opacity: 60%;
      font-weight: 600;
    }
  }
  .mb-1 {
    margin-bottom: calc(var(--spacing) * 1);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }
  .mb-8 {
    margin-bottom: calc(var(--spacing) * 8);
  }
  .mb-10 {
    margin-bottom: calc(var(--spacing) * 10);
  }
  .mb-\[3px\] {
    margin-bottom: 3px;
  }
  .-ml-5 {
    margin-left: calc(var(--spacing) * -5);
  }
  .ml-1 {
    margin-left: calc(var(--spacing) * 1);
  }
  .ml-2 {
    margin-left: calc(var(--spacing) * 2);
  }
  .ml-3 {
    margin-left: calc(var(--spacing) * 3);
  }
  .ml-4 {
    margin-left: calc(var(--spacing) * 4);
  }
  .ml-auto {
    margin-left: auto;
  }
  .carousel-item {
    @layer daisyui.component {
      box-sizing: content-box;
      display: flex;
      flex: none;
      scroll-snap-align: start;
    }
  }
  .box-border {
    box-sizing: border-box;
  }
  .box-content {
    box-sizing: content-box;
  }
  .status {
    @layer daisyui.component {
      display: inline-block;
      aspect-ratio: 1 / 1;
      width: calc(0.25rem * 2);
      height: calc(0.25rem * 2);
      border-radius: var(--radius-selector);
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
      background-position: center;
      background-repeat: no-repeat;
      vertical-align: middle;
      color: color-mix(in srgb, #000 30%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-black) 30%, transparent);
      }
      background-image: radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 );
      box-shadow: 0 2px 3px -1px currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
      }
    }
  }
  .status\! {
    @layer daisyui.component {
      display: inline-block !important;
      aspect-ratio: 1 / 1 !important;
      width: calc(0.25rem * 2) !important;
      height: calc(0.25rem * 2) !important;
      border-radius: var(--radius-selector) !important;
      background-color: var(--color-base-content) !important;
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent) !important;
      }
      background-position: center !important;
      background-repeat: no-repeat !important;
      vertical-align: middle !important;
      color: color-mix(in srgb, #000 30%, transparent) !important;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-black) 30%, transparent) !important;
      }
      background-image: radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 ) !important;
      box-shadow: 0 2px 3px -1px currentColor !important;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000) !important;
      }
    }
  }
  .mockup-phone {
    @layer daisyui.component {
      display: inline-grid;
      justify-items: center;
      border: 5px solid #6b6b6b;
      border-radius: 65px;
      background-color: #000;
      padding: 6px;
      overflow: hidden;
      width: 100%;
      max-width: 462px;
      aspect-ratio: 462 / 978;
      @supports (corner-shape: superellipse(1.45)) {
        border-radius: 90px;
        corner-shape: superellipse(1.45);
      }
    }
  }
  .badge {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 2);
      border-radius: var(--radius-selector);
      vertical-align: middle;
      color: var(--badge-fg);
      border: var(--border) solid var(--badge-color, var(--color-base-200));
      font-size: 0.875rem;
      width: fit-content;
      padding-inline: calc(0.25rem * 3 - var(--border));
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      background-color: var(--badge-bg);
      --badge-bg: var(--badge-color, var(--color-base-100));
      --badge-fg: var(--color-base-content);
      --size: calc(var(--size-selector, 0.25rem) * 6);
      height: var(--size);
    }
  }
  .kbd {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border-radius: var(--radius-field);
      background-color: var(--color-base-200);
      vertical-align: middle;
      padding-left: 0.5em;
      padding-right: 0.5em;
      border: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid color-mix(in srgb, var(--color-base-content) 20%, #0000);
      }
      border-bottom: calc(var(--border) + 1px) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-bottom: calc(var(--border) + 1px) solid color-mix(in srgb, var(--color-base-content) 20%, #0000);
      }
      --size: calc(var(--size-selector, 0.25rem) * 6);
      font-size: 0.875rem;
      height: var(--size);
      min-width: var(--size);
      box-shadow: none;
    }
  }
  .tabs {
    @layer daisyui.component {
      display: flex;
      flex-wrap: wrap;
      --tabs-height: auto;
      --tabs-direction: row;
      --tab-height: calc(var(--size-field, 0.25rem) * 10);
      height: var(--tabs-height);
      flex-direction: var(--tabs-direction);
    }
  }
  .footer {
    @layer daisyui.component {
      display: grid;
      width: 100%;
      grid-auto-flow: row;
      place-items: start;
      column-gap: calc(0.25rem * 4);
      row-gap: calc(0.25rem * 10);
      font-size: 0.875rem;
      line-height: 1.25rem;
      & > * {
        display: grid;
        place-items: start;
        gap: calc(0.25rem * 2);
      }
      &.footer-center {
        grid-auto-flow: column dense;
        place-items: center;
        text-align: center;
        & > * {
          place-items: center;
        }
      }
    }
  }
  .stat {
    @layer daisyui.component {
      display: inline-grid;
      width: 100%;
      column-gap: calc(0.25rem * 4);
      padding-inline: calc(0.25rem * 6);
      padding-block: calc(0.25rem * 4);
      grid-template-columns: repeat(1, 1fr);
      &:not(:last-child) {
        border-inline-end: var(--border) dashed currentColor;
        @supports (color: color-mix(in lab, red, red)) {
          border-inline-end: var(--border) dashed color-mix(in oklab, currentColor 10%, #0000);
        }
        border-block-end: none;
      }
    }
  }
  .navbar-end {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      width: 50%;
      justify-content: flex-end;
    }
  }
  .navbar-start {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      width: 50%;
      justify-content: flex-start;
    }
  }
  .card-body {
    @layer daisyui.component {
      display: flex;
      flex: auto;
      flex-direction: column;
      gap: calc(0.25rem * 2);
      padding: var(--card-p, 1.5rem);
      font-size: var(--card-fs, 0.875rem);
      :where(p) {
        flex-grow: 1;
      }
    }
  }
  .navbar-center {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      flex-shrink: 0;
    }
  }
  .carousel {
    @layer daisyui.component {
      display: inline-flex;
      overflow-x: scroll;
      scroll-snap-type: x mandatory;
      scrollbar-width: none;
      @media (prefers-reduced-motion: no-preference) {
        scroll-behavior: smooth;
      }
      &::-webkit-scrollbar {
        display: none;
      }
    }
  }
  .alert {
    border-width: var(--border);
    border-color: var(--alert-border-color, var(--color-base-200));
    @layer daisyui.component {
      border-style: solid;
      --alert-border-color: var(--color-base-200);
      display: grid;
      align-items: center;
      gap: calc(0.25rem * 4);
      border-radius: var(--radius-box);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 3);
      color: var(--color-base-content);
      background-color: var(--alert-color, var(--color-base-200));
      justify-content: start;
      justify-items: start;
      grid-auto-flow: column;
      grid-template-columns: auto;
      text-align: start;
      font-size: 0.875rem;
      line-height: 1.25rem;
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px #000, 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px color-mix( in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000 ), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
      }
      &:has(:nth-child(2)) {
        grid-template-columns: auto minmax(auto, 1fr);
      }
    }
  }
  .fieldset {
    @layer daisyui.component {
      display: grid;
      gap: calc(0.25rem * 1.5);
      padding-block: calc(0.25rem * 1);
      font-size: 0.75rem;
      grid-template-columns: 1fr;
      grid-auto-rows: max-content;
    }
  }
  .card-actions {
    @layer daisyui.component {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
      gap: calc(0.25rem * 2);
    }
  }
  .card-title {
    @layer daisyui.component {
      display: flex;
      align-items: center;
      gap: calc(0.25rem * 2);
      font-size: var(--cardtitle-fs, 1.125rem);
      font-weight: 600;
    }
  }
  .join {
    display: inline-flex;
    align-items: stretch;
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
    :where(.join-item) {
      border-start-start-radius: var(--join-ss, 0);
      border-start-end-radius: var(--join-se, 0);
      border-end-start-radius: var(--join-es, 0);
      border-end-end-radius: var(--join-ee, 0);
      * {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:first-child) {
      --join-ss: var(--radius-field);
      --join-se: 0;
      --join-es: var(--radius-field);
      --join-ee: 0;
    }
    :first-child:not(:last-child) {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: 0;
        --join-es: var(--radius-field);
        --join-ee: 0;
      }
    }
    > .join-item:where(:last-child) {
      --join-ss: 0;
      --join-se: var(--radius-field);
      --join-es: 0;
      --join-ee: var(--radius-field);
    }
    :last-child:not(:first-child) {
      :where(.join-item) {
        --join-ss: 0;
        --join-se: var(--radius-field);
        --join-es: 0;
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:only-child) {
      --join-ss: var(--radius-field);
      --join-se: var(--radius-field);
      --join-es: var(--radius-field);
      --join-ee: var(--radius-field);
    }
    :only-child {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
  }
  .chat {
    @layer daisyui.component {
      display: grid;
      column-gap: calc(0.25rem * 3);
      padding-block: calc(0.25rem * 1);
      --mask-chat: url("data:image/svg+xml,%3csvg width='13' height='13' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 11.5004C0 13.0004 2 13.0004 2 13.0004H12H13V0.00036329L12.5 0C12.5 0 11.977 2.09572 11.8581 2.50033C11.6075 3.35237 10.9149 4.22374 9 5.50036C6 7.50036 0 10.0004 0 11.5004Z'/%3e%3c/svg%3e");
    }
  }
  .avatar-group {
    @layer daisyui.component {
      display: flex;
      overflow: hidden;
      .avatar {
        overflow: hidden;
        border-radius: calc(infinity * 1px);
        border: 4px solid var(--color-base-100);
      }
    }
  }
  .line-clamp-1 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }
  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }
  .line-clamp-none {
    overflow: visible;
    display: block;
    -webkit-box-orient: horizontal;
    -webkit-line-clamp: unset;
  }
  .prose {
    :root & {
      --tw-prose-body: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-body: color-mix(in oklab, var(--color-base-content) 80%, #0000);
      }
      --tw-prose-headings: var(--color-base-content);
      --tw-prose-lead: var(--color-base-content);
      --tw-prose-links: var(--color-base-content);
      --tw-prose-bold: var(--color-base-content);
      --tw-prose-counters: var(--color-base-content);
      --tw-prose-bullets: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-bullets: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      }
      --tw-prose-hr: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-hr: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --tw-prose-quotes: var(--color-base-content);
      --tw-prose-quote-borders: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-quote-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --tw-prose-captions: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-captions: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      }
      --tw-prose-code: var(--color-base-content);
      --tw-prose-pre-code: var(--color-neutral-content);
      --tw-prose-pre-bg: var(--color-neutral);
      --tw-prose-th-borders: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-th-borders: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      }
      --tw-prose-td-borders: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-td-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --tw-prose-kbd: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-kbd: color-mix(in oklab, var(--color-base-content) 80%, #0000);
      }
      :where(code):not(pre > code) {
        background-color: var(--color-base-200);
        border-radius: var(--radius-selector);
        border: var(--border) solid var(--color-base-300);
        padding-inline: 0.5em;
        font-weight: inherit;
        &:before, &:after {
          display: none;
        }
      }
    }
  }
  .mask {
    @layer daisyui.component {
      display: inline-block;
      vertical-align: middle;
      mask-size: contain;
      mask-repeat: no-repeat;
      mask-position: center;
    }
  }
  .block {
    display: block;
  }
  .contents {
    display: contents;
  }
  .flex {
    display: flex;
  }
  .flow-root {
    display: flow-root;
  }
  .grid {
    display: grid;
  }
  .grid\! {
    display: grid !important;
  }
  .hidden {
    display: none;
  }
  .inline {
    display: inline;
  }
  .inline-block {
    display: inline-block;
  }
  .inline-flex {
    display: inline-flex;
  }
  .inline-grid {
    display: inline-grid;
  }
  .inline-table {
    display: inline-table;
  }
  .list-item {
    display: list-item;
  }
  .table {
    display: table;
  }
  .table-caption {
    display: table-caption;
  }
  .table-cell {
    display: table-cell;
  }
  .table-column {
    display: table-column;
  }
  .table-column-group {
    display: table-column-group;
  }
  .table-footer-group {
    display: table-footer-group;
  }
  .table-header-group {
    display: table-header-group;
  }
  .table-row {
    display: table-row;
  }
  .table-row-group {
    display: table-row-group;
  }
  .aspect-\[1155\/678\] {
    aspect-ratio: 1155/678;
  }
  .modal-bottom {
    @layer daisyui.modifier {
      place-items: end;
      .modal-box {
        height: auto;
        width: 100%;
        max-width: none;
        max-height: calc(100vh - 5em);
        translate: 0 100%;
        scale: 1;
        --modal-tl: var(--radius-box);
        --modal-tr: var(--radius-box);
        --modal-bl: 0;
        --modal-br: 0;
      }
    }
  }
  .modal-middle {
    @layer daisyui.modifier {
      place-items: center;
      .modal-box {
        height: auto;
        width: calc(11/12 * 100%);
        max-width: 32rem;
        max-height: calc(100vh - 5em);
        translate: 0 2%;
        scale: 98%;
        --modal-tl: var(--radius-box);
        --modal-tr: var(--radius-box);
        --modal-bl: var(--radius-box);
        --modal-br: var(--radius-box);
      }
    }
  }
  .modal-top {
    @layer daisyui.modifier {
      place-items: start;
      .modal-box {
        height: auto;
        width: 100%;
        max-width: none;
        max-height: calc(100vh - 5em);
        translate: 0 -100%;
        scale: 1;
        --modal-tl: 0;
        --modal-tr: 0;
        --modal-bl: var(--radius-box);
        --modal-br: var(--radius-box);
      }
    }
  }
  .card-side {
    @layer daisyui.modifier {
      align-items: stretch;
      flex-direction: row;
      :where(figure:first-child) {
        overflow: hidden;
        border-start-start-radius: inherit;
        border-start-end-radius: unset;
        border-end-start-radius: inherit;
        border-end-end-radius: unset;
      }
      :where(figure:last-child) {
        overflow: hidden;
        border-start-start-radius: unset;
        border-start-end-radius: inherit;
        border-end-start-radius: unset;
        border-end-end-radius: inherit;
      }
      figure > * {
        max-width: unset;
      }
      :where(figure > *) {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    }
  }
  .divider-horizontal {
    @layer daisyui.modifier {
      --divider-m: 0 1rem;
      &.divider {
        height: auto;
        width: calc(0.25rem * 4);
        flex-direction: column;
        &:before {
          height: 100%;
          width: calc(0.25rem * 0.5);
        }
        &:after {
          height: 100%;
          width: calc(0.25rem * 0.5);
        }
      }
    }
  }
  .divider-vertical {
    @layer daisyui.modifier {
      --divider-m: 1rem 0;
      &.divider {
        height: calc(0.25rem * 4);
        width: auto;
        flex-direction: row;
        &:before {
          height: calc(0.25rem * 0.5);
          width: 100%;
        }
        &:after {
          height: calc(0.25rem * 0.5);
          width: 100%;
        }
      }
    }
  }
  .btn-circle {
    @layer daisyui.modifier {
      border-radius: calc(infinity * 1px);
      padding-inline: calc(0.25rem * 0);
      width: var(--size);
      height: var(--size);
    }
  }
  .btn-square {
    @layer daisyui.modifier {
      padding-inline: calc(0.25rem * 0);
      width: var(--size);
      height: var(--size);
    }
  }
  .size-4 {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }
  .size-6 {
    width: calc(var(--spacing) * 6);
    height: calc(var(--spacing) * 6);
  }
  .\!h-auto {
    height: auto !important;
  }
  .h-1\.5 {
    height: calc(var(--spacing) * 1.5);
  }
  .h-2 {
    height: calc(var(--spacing) * 2);
  }
  .h-3 {
    height: calc(var(--spacing) * 3);
  }
  .h-4 {
    height: calc(var(--spacing) * 4);
  }
  .h-5 {
    height: calc(var(--spacing) * 5);
  }
  .h-6 {
    height: calc(var(--spacing) * 6);
  }
  .h-8 {
    height: calc(var(--spacing) * 8);
  }
  .h-10 {
    height: calc(var(--spacing) * 10);
  }
  .h-12 {
    height: calc(var(--spacing) * 12);
  }
  .h-14 {
    height: calc(var(--spacing) * 14);
  }
  .h-16 {
    height: calc(var(--spacing) * 16);
  }
  .h-20 {
    height: calc(var(--spacing) * 20);
  }
  .h-24 {
    height: calc(var(--spacing) * 24);
  }
  .h-\[28\.6rem\] {
    height: 28.6rem;
  }
  .h-\[250px\] {
    height: 250px;
  }
  .h-\[calc\(100vh-var\(--header-height\)-4rem\)\] {
    height: calc(100vh - var(--header-height) - 4rem);
  }
  .h-auto {
    height: auto;
  }
  .h-dvh {
    height: 100dvh;
  }
  .h-full {
    height: 100%;
  }
  .h-screen {
    height: 100vh;
  }
  .max-h-36 {
    max-height: calc(var(--spacing) * 36);
  }
  .max-h-\[calc\(100vh-10rem\)\] {
    max-height: calc(100vh - 10rem);
  }
  .max-h-full {
    max-height: 100%;
  }
  .min-h-0 {
    min-height: calc(var(--spacing) * 0);
  }
  .min-h-\[30vh\] {
    min-height: 30vh;
  }
  .min-h-\[calc\(100vh-var\(--header-height\)\)\] {
    min-height: calc(100vh - var(--header-height));
  }
  .min-h-full {
    min-height: 100%;
  }
  .min-h-screen {
    min-height: 100vh;
  }
  .btn-wide {
    @layer daisyui.modifier {
      width: 100%;
      max-width: calc(0.25rem * 64);
    }
  }
  .rating-half {
    @layer daisyui.modifier {
      &.rating-xs *:not(.rating-hidden) {
        width: calc(0.25rem * 2);
      }
      &.rating-sm *:not(.rating-hidden) {
        width: calc(0.25rem * 2.5);
      }
      &.rating-md *:not(.rating-hidden) {
        width: calc(0.25rem * 3);
      }
      &.rating-lg *:not(.rating-hidden) {
        width: .875rem;
      }
      &.rating-xl *:not(.rating-hidden) {
        width: calc(0.25rem * 4);
      }
    }
  }
  .btn-block {
    @layer daisyui.modifier {
      width: 100%;
    }
  }
  .loading-lg {
    @layer daisyui.modifier {
      width: calc(var(--size-selector, 0.25rem) * 7);
    }
  }
  .loading-md {
    @layer daisyui.modifier {
      width: calc(var(--size-selector, 0.25rem) * 6);
    }
  }
  .loading-sm {
    @layer daisyui.modifier {
      width: calc(var(--size-selector, 0.25rem) * 5);
    }
  }
  .loading-xs {
    @layer daisyui.modifier {
      width: calc(var(--size-selector, 0.25rem) * 4);
    }
  }
  .w-1 {
    width: calc(var(--spacing) * 1);
  }
  .w-1\.5 {
    width: calc(var(--spacing) * 1.5);
  }
  .w-2 {
    width: calc(var(--spacing) * 2);
  }
  .w-3 {
    width: calc(var(--spacing) * 3);
  }
  .w-4 {
    width: calc(var(--spacing) * 4);
  }
  .w-5 {
    width: calc(var(--spacing) * 5);
  }
  .w-5xl {
    width: var(--container-5xl);
  }
  .w-6 {
    width: calc(var(--spacing) * 6);
  }
  .w-8 {
    width: calc(var(--spacing) * 8);
  }
  .w-10 {
    width: calc(var(--spacing) * 10);
  }
  .w-14 {
    width: calc(var(--spacing) * 14);
  }
  .w-24 {
    width: calc(var(--spacing) * 24);
  }
  .w-56 {
    width: calc(var(--spacing) * 56);
  }
  .w-90 {
    width: calc(var(--spacing) * 90);
  }
  .w-\[36\.125rem\] {
    width: 36.125rem;
  }
  .w-auto {
    width: auto;
  }
  .w-full {
    width: 100%;
  }
  .w-px {
    width: 1px;
  }
  .max-w-2xl {
    max-width: var(--container-2xl);
  }
  .max-w-7xl {
    max-width: var(--container-7xl);
  }
  .max-w-72 {
    max-width: calc(var(--spacing) * 72);
  }
  .max-w-\[calc\(var\(--max-content-width\)\*0\.8\)\] {
    max-width: calc(var(--max-content-width) * 0.8);
  }
  .max-w-\[var\(--max-content-width\)\] {
    max-width: var(--max-content-width);
  }
  .max-w-full {
    max-width: 100%;
  }
  .max-w-screen-xl {
    max-width: var(--breakpoint-xl);
  }
  .min-w-0 {
    min-width: calc(var(--spacing) * 0);
  }
  .flex-0 {
    flex: 0;
  }
  .flex-1 {
    flex: 1;
  }
  .flex-shrink {
    flex-shrink: 1;
  }
  .flex-shrink-0 {
    flex-shrink: 0;
  }
  .shrink {
    flex-shrink: 1;
  }
  .shrink-0 {
    flex-shrink: 0;
  }
  .flex-grow {
    flex-grow: 1;
  }
  .grow {
    flex-grow: 1;
  }
  .table-auto {
    table-layout: auto;
  }
  .table-fixed {
    table-layout: fixed;
  }
  .caption-bottom {
    caption-side: bottom;
  }
  .caption-top {
    caption-side: top;
  }
  .border-collapse {
    border-collapse: collapse;
  }
  .border-separate {
    border-collapse: separate;
  }
  .-translate-x-1\/2 {
    --tw-translate-x: calc(calc(1/2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .translate-y-0 {
    --tw-translate-y: calc(var(--spacing) * 0);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .translate-y-4 {
    --tw-translate-y: calc(var(--spacing) * 4);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .swap-rotate {
    @layer daisyui.modifier {
      .swap-on, input:indeterminate ~ .swap-on {
        rotate: 45deg;
      }
      input:is(:checked, :indeterminate) ~ .swap-on, &.swap-active .swap-on {
        rotate: 0deg;
      }
      input:is(:checked, :indeterminate) ~ .swap-off, &.swap-active .swap-off {
        rotate: calc(45deg * -1);
      }
    }
  }
  .rotate-90 {
    rotate: 90deg;
  }
  .rotate-180 {
    rotate: 180deg;
  }
  .rotate-270 {
    rotate: 270deg;
  }
  .rotate-\[30deg\] {
    rotate: 30deg;
  }
  .swap-flip {
    @layer daisyui.modifier {
      transform-style: preserve-3d;
      perspective: 20rem;
      .swap-on, .swap-indeterminate, input:indeterminate ~ .swap-on {
        transform: rotateY(180deg);
        backface-visibility: hidden;
      }
      input:is(:checked, :indeterminate) ~ .swap-on, &.swap-active .swap-on {
        transform: rotateY(0deg);
      }
      input:is(:checked, :indeterminate) ~ .swap-off, &.swap-active .swap-off {
        transform: rotateY(-180deg);
        backface-visibility: hidden;
        opacity: 100%;
      }
    }
  }
  .\[transform\:translate3d\(0\,0\,0\)\] {
    transform: translate3d(0,0,0);
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .transform\! {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,) !important;
  }
  .transform-cpu {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .transform-gpu {
    transform: translateZ(0) var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .transform-none {
    transform: none;
  }
  .skeleton {
    @layer daisyui.component {
      border-radius: var(--radius-box);
      background-color: var(--color-base-300);
      @media (prefers-reduced-motion: reduce) {
        transition-duration: 15s;
      }
      will-change: background-position;
      background-image: linear-gradient( 105deg, #0000 0% 40%, var(--color-base-100) 50%, #0000 60% 100% );
      background-size: 200% auto;
      background-repeat: no-repeat;
      background-position-x: -50%;
      @media (prefers-reduced-motion: no-preference) {
        animation: skeleton 1.8s ease-in-out infinite;
      }
    }
  }
  .link {
    @layer daisyui.component {
      cursor: pointer;
      text-decoration-line: underline;
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible {
        outline: 2px solid currentColor;
        outline-offset: 2px;
      }
    }
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .touch-pan-left {
    --tw-pan-x: pan-left;
    touch-action: var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,);
  }
  .touch-pan-right {
    --tw-pan-x: pan-right;
    touch-action: var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,);
  }
  .touch-pan-x {
    --tw-pan-x: pan-x;
    touch-action: var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,);
  }
  .touch-pan-down {
    --tw-pan-y: pan-down;
    touch-action: var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,);
  }
  .touch-pan-up {
    --tw-pan-y: pan-up;
    touch-action: var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,);
  }
  .touch-pan-y {
    --tw-pan-y: pan-y;
    touch-action: var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,);
  }
  .touch-pinch-zoom {
    --tw-pinch-zoom: pinch-zoom;
    touch-action: var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,);
  }
  .touch-auto {
    touch-action: auto;
  }
  .touch-manipulation {
    touch-action: manipulation;
  }
  .touch-none {
    touch-action: none;
  }
  .resize {
    resize: both;
  }
  .resize-none {
    resize: none;
  }
  .resize-x {
    resize: horizontal;
  }
  .resize-y {
    resize: vertical;
  }
  .carousel-vertical {
    @layer daisyui.modifier {
      flex-direction: column;
      overflow-y: scroll;
      scroll-snap-type: y mandatory;
    }
  }
  .snap-both {
    scroll-snap-type: both var(--tw-scroll-snap-strictness);
  }
  .snap-none {
    scroll-snap-type: none;
  }
  .snap-x {
    scroll-snap-type: x var(--tw-scroll-snap-strictness);
  }
  .snap-y {
    scroll-snap-type: y var(--tw-scroll-snap-strictness);
  }
  .snap-mandatory {
    --tw-scroll-snap-strictness: mandatory;
  }
  .snap-proximity {
    --tw-scroll-snap-strictness: proximity;
  }
  .carousel-center {
    @layer daisyui.modifier {
      .carousel-item {
        scroll-snap-align: center;
      }
    }
  }
  .carousel-end {
    @layer daisyui.modifier {
      .carousel-item {
        scroll-snap-align: end;
      }
    }
  }
  .carousel-start {
    @layer daisyui.modifier {
      .carousel-item {
        scroll-snap-align: start;
      }
    }
  }
  .snap-align-none {
    scroll-snap-align: none;
  }
  .snap-center {
    scroll-snap-align: center;
  }
  .snap-end {
    scroll-snap-align: end;
  }
  .snap-start {
    scroll-snap-align: start;
  }
  .snap-always {
    scroll-snap-stop: always;
  }
  .snap-normal {
    scroll-snap-stop: normal;
  }
  .scroll-mt-96 {
    scroll-margin-top: calc(var(--spacing) * 96);
  }
  .scroll-pt-72 {
    scroll-padding-top: calc(var(--spacing) * 72);
  }
  .list-inside {
    list-style-position: inside;
  }
  .list-outside {
    list-style-position: outside;
  }
  .list-disc {
    list-style-type: disc;
  }
  .appearance-none {
    appearance: none;
  }
  .break-before-all {
    break-before: all;
  }
  .break-before-auto {
    break-before: auto;
  }
  .break-before-avoid {
    break-before: avoid;
  }
  .break-before-avoid-page {
    break-before: avoid-page;
  }
  .break-before-column {
    break-before: column;
  }
  .break-before-left {
    break-before: left;
  }
  .break-before-page {
    break-before: page;
  }
  .break-before-right {
    break-before: right;
  }
  .break-inside-auto {
    break-inside: auto;
  }
  .break-inside-avoid {
    break-inside: avoid;
  }
  .break-inside-avoid-column {
    break-inside: avoid-column;
  }
  .break-inside-avoid-page {
    break-inside: avoid-page;
  }
  .break-after-all {
    break-after: all;
  }
  .break-after-auto {
    break-after: auto;
  }
  .break-after-avoid {
    break-after: avoid;
  }
  .break-after-avoid-page {
    break-after: avoid-page;
  }
  .break-after-column {
    break-after: column;
  }
  .break-after-left {
    break-after: left;
  }
  .break-after-page {
    break-after: page;
  }
  .break-after-right {
    break-after: right;
  }
  .stats-horizontal {
    @layer daisyui.modifier {
      grid-auto-flow: column;
      overflow-x: auto;
      .stat:not(:last-child) {
        border-inline-end: var(--border) dashed currentColor;
        @supports (color: color-mix(in lab, red, red)) {
          border-inline-end: var(--border) dashed color-mix(in oklab, currentColor 10%, #0000);
        }
        border-block-end: none;
      }
    }
  }
  .stats-vertical {
    @layer daisyui.modifier {
      grid-auto-flow: row;
      overflow-y: auto;
      .stat:not(:last-child) {
        border-inline-end: none;
        border-block-end: var(--border) dashed currentColor;
        @supports (color: color-mix(in lab, red, red)) {
          border-block-end: var(--border) dashed color-mix(in oklab, currentColor 10%, #0000);
        }
      }
    }
  }
  .grid-flow-col {
    grid-auto-flow: column;
  }
  .grid-flow-col-dense {
    grid-auto-flow: column dense;
  }
  .grid-flow-dense {
    grid-auto-flow: dense;
  }
  .grid-flow-row {
    grid-auto-flow: row;
  }
  .grid-flow-row-dense {
    grid-auto-flow: row dense;
  }
  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }
  .grid-cols-5 {
    grid-template-columns: repeat(5, minmax(0, 1fr));
  }
  .grid-cols-\[1fr\] {
    grid-template-columns: 1fr;
  }
  .grid-rows-3 {
    grid-template-rows: repeat(3, minmax(0, 1fr));
  }
  .grid-rows-\[auto_1fr_auto\] {
    grid-template-rows: auto 1fr auto;
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-col-reverse {
    flex-direction: column-reverse;
  }
  .flex-row {
    flex-direction: row;
  }
  .flex-row-reverse {
    flex-direction: row-reverse;
  }
  .flex-nowrap {
    flex-wrap: nowrap;
  }
  .flex-wrap {
    flex-wrap: wrap;
  }
  .flex-wrap-reverse {
    flex-wrap: wrap-reverse;
  }
  .place-content-around {
    place-content: space-around;
  }
  .place-content-baseline {
    place-content: baseline;
  }
  .place-content-between {
    place-content: space-between;
  }
  .place-content-center {
    place-content: center;
  }
  .place-content-end {
    place-content: end;
  }
  .place-content-evenly {
    place-content: space-evenly;
  }
  .place-content-start {
    place-content: start;
  }
  .place-content-stretch {
    place-content: stretch;
  }
  .place-items-baseline {
    place-items: baseline;
  }
  .place-items-center {
    place-items: center;
  }
  .place-items-end {
    place-items: end;
  }
  .place-items-start {
    place-items: start;
  }
  .place-items-stretch {
    place-items: stretch;
  }
  .content-around {
    align-content: space-around;
  }
  .content-baseline {
    align-content: baseline;
  }
  .content-between {
    align-content: space-between;
  }
  .content-center {
    align-content: center;
  }
  .content-end {
    align-content: flex-end;
  }
  .content-evenly {
    align-content: space-evenly;
  }
  .content-normal {
    align-content: normal;
  }
  .content-start {
    align-content: flex-start;
  }
  .content-stretch {
    align-content: stretch;
  }
  .items-baseline {
    align-items: baseline;
  }
  .items-center {
    align-items: center;
  }
  .items-end {
    align-items: flex-end;
  }
  .items-start {
    align-items: flex-start;
  }
  .items-stretch {
    align-items: stretch;
  }
  .justify-around {
    justify-content: space-around;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .justify-evenly {
    justify-content: space-evenly;
  }
  .justify-normal {
    justify-content: normal;
  }
  .justify-start {
    justify-content: flex-start;
  }
  .justify-stretch {
    justify-content: stretch;
  }
  .justify-items-center {
    justify-items: center;
  }
  .justify-items-end {
    justify-items: end;
  }
  .justify-items-start {
    justify-items: start;
  }
  .justify-items-stretch {
    justify-items: stretch;
  }
  .gap-1 {
    gap: calc(var(--spacing) * 1);
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }
  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }
  .gap-6 {
    gap: calc(var(--spacing) * 6);
  }
  .gap-8 {
    gap: calc(var(--spacing) * 8);
  }
  .space-y-1 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 1) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-2 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-3 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 3) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-4 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-5 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 5) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 5) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-8 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 8) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 8) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-reverse {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 1;
    }
  }
  .-space-x-px {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 0;
      margin-inline-start: calc(-1px * var(--tw-space-x-reverse));
      margin-inline-end: calc(-1px * calc(1 - var(--tw-space-x-reverse)));
    }
  }
  .space-x-1 {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 0;
      margin-inline-start: calc(calc(var(--spacing) * 1) * var(--tw-space-x-reverse));
      margin-inline-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-x-reverse)));
    }
  }
  .space-x-2 {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 0;
      margin-inline-start: calc(calc(var(--spacing) * 2) * var(--tw-space-x-reverse));
      margin-inline-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-x-reverse)));
    }
  }
  .space-x-4 {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 0;
      margin-inline-start: calc(calc(var(--spacing) * 4) * var(--tw-space-x-reverse));
      margin-inline-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-x-reverse)));
    }
  }
  .space-x-reverse {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 1;
    }
  }
  .gap-y-4 {
    row-gap: calc(var(--spacing) * 4);
  }
  .divide-x {
    :where(& > :not(:last-child)) {
      --tw-divide-x-reverse: 0;
      border-inline-style: var(--tw-border-style);
      border-inline-start-width: calc(1px * var(--tw-divide-x-reverse));
      border-inline-end-width: calc(1px * calc(1 - var(--tw-divide-x-reverse)));
    }
  }
  .divide-y {
    :where(& > :not(:last-child)) {
      --tw-divide-y-reverse: 0;
      border-bottom-style: var(--tw-border-style);
      border-top-style: var(--tw-border-style);
      border-top-width: calc(1px * var(--tw-divide-y-reverse));
      border-bottom-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
    }
  }
  .divide-y-reverse {
    :where(& > :not(:last-child)) {
      --tw-divide-y-reverse: 1;
    }
  }
  .divide-dashed {
    :where(& > :not(:last-child)) {
      --tw-border-style: dashed;
      border-style: dashed;
    }
  }
  .divide-dotted {
    :where(& > :not(:last-child)) {
      --tw-border-style: dotted;
      border-style: dotted;
    }
  }
  .divide-double {
    :where(& > :not(:last-child)) {
      --tw-border-style: double;
      border-style: double;
    }
  }
  .divide-none {
    :where(& > :not(:last-child)) {
      --tw-border-style: none;
      border-style: none;
    }
  }
  .divide-solid {
    :where(& > :not(:last-child)) {
      --tw-border-style: solid;
      border-style: solid;
    }
  }
  .divide-base-300 {
    :where(& > :not(:last-child)) {
      border-color: var(--color-base-300);
    }
  }
  .place-self-auto {
    place-self: auto;
  }
  .place-self-center {
    place-self: center;
  }
  .place-self-end {
    place-self: end;
  }
  .place-self-start {
    place-self: start;
  }
  .place-self-stretch {
    place-self: stretch;
  }
  .self-auto {
    align-self: auto;
  }
  .self-baseline {
    align-self: baseline;
  }
  .self-center {
    align-self: center;
  }
  .self-end {
    align-self: flex-end;
  }
  .self-start {
    align-self: flex-start;
  }
  .self-stretch {
    align-self: stretch;
  }
  .justify-self-auto {
    justify-self: auto;
  }
  .justify-self-center {
    justify-self: center;
  }
  .justify-self-end {
    justify-self: flex-end;
  }
  .justify-self-start {
    justify-self: flex-start;
  }
  .justify-self-stretch {
    justify-self: stretch;
  }
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .overflow-auto {
    overflow: auto;
  }
  .overflow-clip {
    overflow: clip;
  }
  .overflow-hidden {
    overflow: hidden;
  }
  .overflow-scroll {
    overflow: scroll;
  }
  .overflow-visible {
    overflow: visible;
  }
  .overflow-x-auto {
    overflow-x: auto;
  }
  .overflow-x-clip {
    overflow-x: clip;
  }
  .overflow-x-hidden {
    overflow-x: hidden;
  }
  .overflow-x-scroll {
    overflow-x: scroll;
  }
  .overflow-x-visible {
    overflow-x: visible;
  }
  .overflow-y-auto {
    overflow-y: auto;
  }
  .overflow-y-clip {
    overflow-y: clip;
  }
  .overflow-y-hidden {
    overflow-y: hidden;
  }
  .overflow-y-scroll {
    overflow-y: scroll;
  }
  .overflow-y-visible {
    overflow-y: visible;
  }
  .overscroll-auto {
    overscroll-behavior: auto;
  }
  .overscroll-contain {
    overscroll-behavior: contain;
  }
  .overscroll-none {
    overscroll-behavior: none;
  }
  .overscroll-x-auto {
    overscroll-behavior-x: auto;
  }
  .overscroll-x-contain {
    overscroll-behavior-x: contain;
  }
  .overscroll-x-none {
    overscroll-behavior-x: none;
  }
  .overscroll-y-auto {
    overscroll-behavior-y: auto;
  }
  .overscroll-y-contain {
    overscroll-behavior-y: contain;
  }
  .overscroll-y-none {
    overscroll-behavior-y: none;
  }
  .scroll-auto {
    scroll-behavior: auto;
  }
  .scroll-smooth {
    scroll-behavior: smooth;
  }
  .timeline-box {
    @layer daisyui.component {
      border: var(--border) solid;
      border-radius: var(--radius-box);
      border-color: var(--color-base-300);
      background-color: var(--color-base-100);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 2);
      font-size: 0.75rem;
      box-shadow: 0 1px 2px 0 oklch(0% 0 0/0.05);
    }
  }
  .menu-lg {
    @layer daisyui.modifier {
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 1.5);
        font-size: 1.125rem;
      }
      .menu-title {
        padding-inline: calc(0.25rem * 6);
        padding-block: calc(0.25rem * 3);
      }
    }
  }
  .menu-md {
    @layer daisyui.modifier {
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 1.5);
        font-size: 0.875rem;
      }
      .menu-title {
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 2);
      }
    }
  }
  .menu-sm {
    @layer daisyui.modifier {
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 2.5);
        padding-block: calc(0.25rem * 1);
        font-size: 0.75rem;
      }
      .menu-title {
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 2);
      }
    }
  }
  .menu-xs {
    @layer daisyui.modifier {
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 2);
        padding-block: calc(0.25rem * 1);
        font-size: 0.6875rem;
      }
      .menu-title {
        padding-inline: calc(0.25rem * 2);
        padding-block: calc(0.25rem * 1);
      }
    }
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-2xl {
    border-radius: var(--radius-2xl);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-full {
    border-radius: calc(infinity * 1px);
  }
  .rounded-lg {
    border-radius: var(--radius-lg);
  }
  .rounded-md {
    border-radius: var(--radius-md);
  }
  .rounded-sm {
    border-radius: var(--radius-sm);
  }
  .rounded-s {
    border-start-start-radius: 0.25rem;
    border-end-start-radius: 0.25rem;
  }
  .rounded-ss {
    border-start-start-radius: 0.25rem;
  }
  .rounded-e {
    border-start-end-radius: 0.25rem;
    border-end-end-radius: 0.25rem;
  }
  .rounded-se {
    border-start-end-radius: 0.25rem;
  }
  .rounded-ee {
    border-end-end-radius: 0.25rem;
  }
  .rounded-es {
    border-end-start-radius: 0.25rem;
  }
  .rounded-t {
    border-top-left-radius: 0.25rem;
    border-top-right-radius: 0.25rem;
  }
  .rounded-l {
    border-top-left-radius: 0.25rem;
    border-bottom-left-radius: 0.25rem;
  }
  .rounded-l-md {
    border-top-left-radius: var(--radius-md);
    border-bottom-left-radius: var(--radius-md);
  }
  .rounded-l-none {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
  .rounded-tl {
    border-top-left-radius: 0.25rem;
  }
  .rounded-r {
    border-top-right-radius: 0.25rem;
    border-bottom-right-radius: 0.25rem;
  }
  .rounded-r-md {
    border-top-right-radius: var(--radius-md);
    border-bottom-right-radius: var(--radius-md);
  }
  .rounded-tr {
    border-top-right-radius: 0.25rem;
  }
  .rounded-b {
    border-bottom-right-radius: 0.25rem;
    border-bottom-left-radius: 0.25rem;
  }
  .rounded-br {
    border-bottom-right-radius: 0.25rem;
  }
  .rounded-bl {
    border-bottom-left-radius: 0.25rem;
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-0 {
    border-style: var(--tw-border-style);
    border-width: 0px;
  }
  .border-2 {
    border-style: var(--tw-border-style);
    border-width: 2px;
  }
  .border-x {
    border-inline-style: var(--tw-border-style);
    border-inline-width: 1px;
  }
  .border-y {
    border-block-style: var(--tw-border-style);
    border-block-width: 1px;
  }
  .border-s {
    border-inline-start-style: var(--tw-border-style);
    border-inline-start-width: 1px;
  }
  .border-e {
    border-inline-end-style: var(--tw-border-style);
    border-inline-end-width: 1px;
  }
  .border-t {
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
  }
  .border-r {
    border-right-style: var(--tw-border-style);
    border-right-width: 1px;
  }
  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }
  .border-l {
    border-left-style: var(--tw-border-style);
    border-left-width: 1px;
  }
  .border-l-2 {
    border-left-style: var(--tw-border-style);
    border-left-width: 2px;
  }
  .border-l-4 {
    border-left-style: var(--tw-border-style);
    border-left-width: 4px;
  }
  .border-dashed {
    --tw-border-style: dashed;
    border-style: dashed;
  }
  .border-dotted {
    --tw-border-style: dotted;
    border-style: dotted;
  }
  .border-double {
    --tw-border-style: double;
    border-style: double;
  }
  .border-hidden {
    --tw-border-style: hidden;
    border-style: hidden;
  }
  .border-none {
    --tw-border-style: none;
    border-style: none;
  }
  .border-solid {
    --tw-border-style: solid;
    border-style: solid;
  }
  .badge-ghost {
    @layer daisyui.modifier {
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);
      background-image: none;
    }
  }
  .badge-soft {
    @layer daisyui.modifier {
      color: var(--badge-color, var(--color-base-content));
      background-color: var(--badge-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix( in oklab, var(--badge-color, var(--color-base-content)) 8%, var(--color-base-100) );
      }
      border-color: var(--badge-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix( in oklab, var(--badge-color, var(--color-base-content)) 10%, var(--color-base-100) );
      }
      background-image: none;
    }
  }
  .select-ghost {
    @layer daisyui.modifier {
      background-color: transparent;
      transition: background-color 0.2s;
      box-shadow: none;
      border-color: #0000;
      &:focus, &:focus-within {
        background-color: var(--color-base-100);
        color: var(--color-base-content);
        border-color: #0000;
        box-shadow: none;
      }
    }
  }
  .input-ghost {
    @layer daisyui.modifier {
      background-color: transparent;
      box-shadow: none;
      border-color: #0000;
      &:focus, &:focus-within {
        background-color: var(--color-base-100);
        color: var(--color-base-content);
        border-color: #0000;
        box-shadow: none;
      }
    }
  }
  .textarea-ghost {
    @layer daisyui.modifier {
      background-color: transparent;
      box-shadow: none;
      border-color: #0000;
      &:focus, &:focus-within {
        background-color: var(--color-base-100);
        color: var(--color-base-content);
        border-color: #0000;
        box-shadow: none;
      }
    }
  }
  .badge-outline {
    @layer daisyui.modifier {
      color: var(--badge-color);
      --badge-bg: #0000;
      background-image: none;
      border-color: currentColor;
    }
  }
  .\!border-primary-200 {
    border-color: var(--color-primary-200) !important;
  }
  .border-\[var\(--tag-color\)\] {
    border-color: var(--tag-color);
  }
  .border-base-200 {
    border-color: var(--color-base-200);
  }
  .border-gray-300 {
    border-color: var(--color-gray-300);
  }
  .border-primary {
    border-color: var(--color-primary);
  }
  .border-primary\/20 {
    border-color: var(--color-primary);
    @supports (color: color-mix(in lab, red, red)) {
      border-color: color-mix(in oklab, var(--color-primary) 20%, transparent);
    }
  }
  .border-slate-200 {
    border-color: var(--color-slate-200);
  }
  .border-slate-300 {
    border-color: var(--color-slate-300);
  }
  .border-white\/5 {
    border-color: color-mix(in srgb, #fff 5%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      border-color: color-mix(in oklab, var(--color-white) 5%, transparent);
    }
  }
  .glass {
    border: none;
    backdrop-filter: blur(var(--glass-blur, 40px));
    background-color: #0000;
    background-image: linear-gradient( 135deg, oklch(100% 0 0 / var(--glass-opacity, 30%)) 0%, oklch(0% 0 0 / 0%) 100% ), linear-gradient( var(--glass-reflect-degree, 100deg), oklch(100% 0 0 / var(--glass-reflect-opacity, 5%)) 25%, oklch(0% 0 0 / 0%) 25% );
    box-shadow: 0 0 0 1px oklch(100% 0 0 / var(--glass-border-opacity, 20%)) inset, 0 0 0 2px oklch(0% 0 0 / 5%);
    text-shadow: 0 1px oklch(0% 0 0 / var(--glass-text-shadow-opacity, 5%));
  }
  .chat-bubble-accent {
    @layer daisyui.modifier {
      background-color: var(--color-accent);
      color: var(--color-accent-content);
    }
  }
  .chat-bubble-error {
    @layer daisyui.modifier {
      background-color: var(--color-error);
      color: var(--color-error-content);
    }
  }
  .chat-bubble-info {
    @layer daisyui.modifier {
      background-color: var(--color-info);
      color: var(--color-info-content);
    }
  }
  .chat-bubble-primary {
    @layer daisyui.modifier {
      background-color: var(--color-primary);
      color: var(--color-primary-content);
    }
  }
  .chat-bubble-secondary {
    @layer daisyui.modifier {
      background-color: var(--color-secondary);
      color: var(--color-secondary-content);
    }
  }
  .chat-bubble-success {
    @layer daisyui.modifier {
      background-color: var(--color-success);
      color: var(--color-success-content);
    }
  }
  .chat-bubble-warning {
    @layer daisyui.modifier {
      background-color: var(--color-warning);
      color: var(--color-warning-content);
    }
  }
  .table-zebra {
    @layer daisyui.modifier {
      tbody {
        tr {
          &:where(:nth-child(even)) {
            background-color: var(--color-base-200);
            :where(.table-pin-cols tr th) {
              background-color: var(--color-base-200);
            }
          }
          &.row-hover {
            &, &:where(:nth-child(even)) {
              &:hover {
                @media (hover: hover) {
                  background-color: var(--color-base-300);
                }
              }
            }
          }
        }
      }
    }
  }
  .\!bg-primary-200 {
    background-color: var(--color-primary-200) !important;
  }
  .bg-\[var\(--header-bg\)\] {
    background-color: var(--header-bg);
  }
  .bg-\[var\(--tag-color\)\/20\] {
    background-color: var(--tag-color)/20;
  }
  .bg-accent {
    background-color: var(--color-accent);
  }
  .bg-accent-100 {
    background-color: var(--color-accent-100);
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-base-200 {
    background-color: var(--color-base-200);
  }
  .bg-base-300 {
    background-color: var(--color-base-300);
  }
  .bg-gray-200 {
    background-color: var(--color-gray-200);
  }
  .bg-gray-400 {
    background-color: var(--color-gray-400);
  }
  .bg-neutral {
    background-color: var(--color-neutral);
  }
  .bg-primary {
    background-color: var(--color-primary);
  }
  .bg-primary\/10 {
    background-color: var(--color-primary);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
    }
  }
  .bg-secondary {
    background-color: var(--color-secondary);
  }
  .bg-slate-900 {
    background-color: var(--color-slate-900);
  }
  .bg-transparent {
    background-color: transparent;
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .bg-gradient-to-tr {
    --tw-gradient-position: to top right in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }
  .from-\[\#ff80b5\] {
    --tw-gradient-from: #ff80b5;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .from-primary {
    --tw-gradient-from: var(--color-primary);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-\[\#9089fc\] {
    --tw-gradient-to: #9089fc;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-secondary {
    --tw-gradient-to: var(--color-secondary);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .loading-ball {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cellipse cx='12' cy='5' rx='4' ry='4'%3E%3Canimate attributeName='cy' values='5;20;20.5;20;5' keyTimes='0;0.469;0.5;0.531;1' dur='.8s' repeatCount='indefinite' keySplines='.33,0,.66,.33;.33,.66,.66,1'/%3E%3Canimate attributeName='rx' values='4;4;4.8;4;4' keyTimes='0;0.469;0.5;0.531;1' dur='.8s' repeatCount='indefinite'/%3E%3Canimate attributeName='ry' values='4;4;3;4;4' keyTimes='0;0.469;0.5;0.531;1' dur='.8s' repeatCount='indefinite'/%3E%3C/ellipse%3E%3C/svg%3E");
    }
  }
  .loading-bars {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Crect x='1' y='1' width='6' height='22'%3E%3Canimate attributeName='y' values='1;5;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite'/%3E%3Canimate attributeName='height' values='22;14;22' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite'/%3E%3Canimate attributeName='opacity' values='1;0.2;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite'/%3E%3C/rect%3E%3Crect x='9' y='1' width='6' height='22'%3E%3Canimate attributeName='y' values='1;5;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.65s'/%3E%3Canimate attributeName='height' values='22;14;22' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.65s'/%3E%3Canimate attributeName='opacity' values='1;0.2;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.65s'/%3E%3C/rect%3E%3Crect x='17' y='1' width='6' height='22'%3E%3Canimate attributeName='y' values='1;5;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.5s'/%3E%3Canimate attributeName='height' values='22;14;22' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.5s'/%3E%3Canimate attributeName='opacity' values='1;0.2;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.5s'/%3E%3C/rect%3E%3C/svg%3E");
    }
  }
  .loading-dots {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='4' cy='12' r='3'%3E%3Canimate attributeName='cy' values='12;6;12;12' keyTimes='0;0.286;0.571;1' dur='1.05s' repeatCount='indefinite' keySplines='.33,0,.66,.33;.33,.66,.66,1'/%3E%3C/circle%3E%3Ccircle cx='12' cy='12' r='3'%3E%3Canimate attributeName='cy' values='12;6;12;12' keyTimes='0;0.286;0.571;1' dur='1.05s' repeatCount='indefinite' keySplines='.33,0,.66,.33;.33,.66,.66,1' begin='0.1s'/%3E%3C/circle%3E%3Ccircle cx='20' cy='12' r='3'%3E%3Canimate attributeName='cy' values='12;6;12;12' keyTimes='0;0.286;0.571;1' dur='1.05s' repeatCount='indefinite' keySplines='.33,0,.66,.33;.33,.66,.66,1' begin='0.2s'/%3E%3C/circle%3E%3C/svg%3E");
    }
  }
  .loading-infinity {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' style='shape-rendering:auto;' width='200px' height='200px' viewBox='0 0 100 100' preserveAspectRatio='xMidYMid'%3E%3Cpath fill='none' stroke='black' stroke-width='10' stroke-dasharray='205.271 51.318' d='M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z' stroke-linecap='round' style='transform:scale(0.8);transform-origin:50px 50px'%3E%3Canimate attributeName='stroke-dashoffset' repeatCount='indefinite' dur='2s' keyTimes='0;1' values='0;256.589'/%3E%3C/path%3E%3C/svg%3E");
    }
  }
  .loading-ring {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3Csvg width='44' height='44' viewBox='0 0 44 44' xmlns='http://www.w3.org/2000/svg' stroke='white'%3E%3Cg fill='none' fill-rule='evenodd' stroke-width='2'%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='0s' dur='1.8s' values='1;20' calcMode='spline' keyTimes='0;1' keySplines='0.165,0.84,0.44,1' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-opacity' begin='0s' dur='1.8s' values='1;0' calcMode='spline' keyTimes='0;1' keySplines='0.3,0.61,0.355,1' repeatCount='indefinite'/%3E%3C/circle%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='-0.9s' dur='1.8s' values='1;20' calcMode='spline' keyTimes='0;1' keySplines='0.165,0.84,0.44,1' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-opacity' begin='-0.9s' dur='1.8s' values='1;0' calcMode='spline' keyTimes='0;1' keySplines='0.3,0.61,0.355,1' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
    }
  }
  .loading-spinner {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
    }
  }
  .mask-circle {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle fill='black' cx='100' cy='100' r='100' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-decagon {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='192' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 58.779 19.098 36.327 50v61.804l-36.327 50L96 200l-58.779-19.098-36.327-50V69.098l36.327-50z' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-diamond {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m100 0 100 100-100 100L0 100z' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-heart {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='200' height='185' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 184.606a15.384 15.384 0 0 1-8.653-2.678C53.565 156.28 37.205 138.695 28.182 127.7 8.952 104.264-.254 80.202.005 54.146.308 24.287 24.264 0 53.406 0c21.192 0 35.869 11.937 44.416 21.879a2.884 2.884 0 0 0 4.356 0C110.725 11.927 125.402 0 146.594 0c29.142 0 53.098 24.287 53.4 54.151.26 26.061-8.956 50.122-28.176 73.554-9.023 10.994-25.383 28.58-63.165 54.228a15.384 15.384 0 0 1-8.653 2.673Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e");
    }
  }
  .mask-hexagon {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='182' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M.3 65.486c0-9.196 6.687-20.063 14.211-25.078l61.86-35.946c8.36-5.016 20.899-5.016 29.258 0l61.86 35.946c8.36 5.015 14.211 15.882 14.211 25.078v71.055c0 9.196-6.687 20.063-14.211 25.079l-61.86 35.945c-8.36 4.18-20.899 4.18-29.258 0L14.51 161.62C6.151 157.44.3 145.737.3 136.54V65.486Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e");
    }
  }
  .mask-hexagon-2 {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='200' height='182' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M64.786 181.4c-9.196 0-20.063-6.687-25.079-14.21L3.762 105.33c-5.016-8.36-5.016-20.9 0-29.259l35.945-61.86C44.723 5.851 55.59 0 64.786 0h71.055c9.196 0 20.063 6.688 25.079 14.211l35.945 61.86c4.18 8.36 4.18 20.899 0 29.258l-35.945 61.86c-4.18 8.36-15.883 14.211-25.079 14.211H64.786Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e");
    }
  }
  .mask-pentagon {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='192' height='181' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 95.106 69.098-36.327 111.804H37.22L.894 69.098z' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-squircle {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 0C20 0 0 20 0 100s20 100 100 100 100-20 100-100S180 0 100 0Z'/%3e%3c/svg%3e");
    }
  }
  .mask-star {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 137.263-58.779 42.024 22.163-68.389L.894 68.481l72.476-.243L96 0l22.63 68.238 72.476.243-58.49 42.417 22.163 68.389z' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-star-2 {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 153.044-58.779 26.243 7.02-63.513L.894 68.481l63.117-13.01L96 0l31.989 55.472 63.117 13.01-43.347 47.292 7.02 63.513z' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-triangle {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='174' height='149' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 148.476-86.603.185L43.86 74.423 87 0l43.14 74.423 43.463 74.238z' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-triangle-2 {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='174' height='150' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 .738 86.603-.184-43.463 74.238L87 149.214 43.86 74.792.397.554z' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-triangle-3 {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m149.369 87.107.185 86.603-74.239-43.463L.893 87.107l74.422-43.14L149.554.505z' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-triangle-4 {
    @layer daisyui.modifier {
      mask-image: url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M.631 87.107.446.505l74.239 43.462 74.422 43.14-74.422 43.14L.446 173.71z' fill-rule='evenodd'/%3e%3c/svg%3e");
    }
  }
  .mask-circle {
    --tw-mask-radial-shape: circle;
  }
  .box-decoration-clone {
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
  }
  .box-decoration-slice {
    -webkit-box-decoration-break: slice;
    box-decoration-break: slice;
  }
  .decoration-clone {
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
  }
  .decoration-slice {
    -webkit-box-decoration-break: slice;
    box-decoration-break: slice;
  }
  .bg-cover {
    background-size: cover;
  }
  .bg-fixed {
    background-attachment: fixed;
  }
  .bg-local {
    background-attachment: local;
  }
  .bg-scroll {
    background-attachment: scroll;
  }
  .bg-clip-border {
    background-clip: border-box;
  }
  .bg-clip-content {
    background-clip: content-box;
  }
  .bg-clip-padding {
    background-clip: padding-box;
  }
  .bg-clip-text {
    background-clip: text;
  }
  .bg-center {
    background-position: center;
  }
  .bg-no-repeat {
    background-repeat: no-repeat;
  }
  .bg-repeat {
    background-repeat: repeat;
  }
  .bg-repeat-round {
    background-repeat: round;
  }
  .bg-repeat-space {
    background-repeat: space;
  }
  .bg-repeat-x {
    background-repeat: repeat-x;
  }
  .bg-repeat-y {
    background-repeat: repeat-y;
  }
  .bg-origin-border {
    background-origin: border-box;
  }
  .bg-origin-content {
    background-origin: content-box;
  }
  .bg-origin-padding {
    background-origin: padding-box;
  }
  .mask-half-1 {
    @layer daisyui.modifier {
      mask-size: 200%;
      mask-position: left;
      mask-position: left;
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        mask-position: right;
      }
    }
  }
  .mask-half-2 {
    @layer daisyui.modifier {
      mask-size: 200%;
      mask-position: right;
      mask-position: right;
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        mask-position: left;
      }
    }
  }
  .mask-repeat {
    mask-repeat: repeat;
  }
  .fill-current {
    fill: currentcolor;
  }
  .fill-slate-500 {
    fill: var(--color-slate-500);
  }
  .stroke-current {
    stroke: currentcolor;
  }
  .\!object-contain {
    object-fit: contain !important;
  }
  .object-contain {
    object-fit: contain;
  }
  .object-cover {
    object-fit: cover;
  }
  .object-fill {
    object-fit: fill;
  }
  .object-none {
    object-fit: none;
  }
  .object-scale-down {
    object-fit: scale-down;
  }
  .checkbox-lg {
    @layer daisyui.modifier {
      padding: 0.3125rem;
      --size: calc(var(--size-selector, 0.25rem) * 7);
    }
  }
  .checkbox-md {
    @layer daisyui.modifier {
      padding: 0.25rem;
      --size: calc(var(--size-selector, 0.25rem) * 6);
    }
  }
  .checkbox-sm {
    @layer daisyui.modifier {
      padding: 0.1875rem;
      --size: calc(var(--size-selector, 0.25rem) * 5);
    }
  }
  .checkbox-xs {
    @layer daisyui.modifier {
      padding: 0.125rem;
      --size: calc(var(--size-selector, 0.25rem) * 4);
    }
  }
  .radio-lg {
    @layer daisyui.modifier {
      padding: 0.3125rem;
      &:is([type="radio"]) {
        --size: calc(var(--size-selector, 0.25rem) * 7);
      }
    }
  }
  .radio-md {
    @layer daisyui.modifier {
      padding: 0.25rem;
      &:is([type="radio"]) {
        --size: calc(var(--size-selector, 0.25rem) * 6);
      }
    }
  }
  .radio-sm {
    @layer daisyui.modifier {
      padding: 0.1875rem;
      &:is([type="radio"]) {
        --size: calc(var(--size-selector, 0.25rem) * 5);
      }
    }
  }
  .radio-xs {
    @layer daisyui.modifier {
      padding: 0.125rem;
      &:is([type="radio"]) {
        --size: calc(var(--size-selector, 0.25rem) * 4);
      }
    }
  }
  .p-1 {
    padding: calc(var(--spacing) * 1);
  }
  .p-2 {
    padding: calc(var(--spacing) * 2);
  }
  .p-3 {
    padding: calc(var(--spacing) * 3);
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .menu-title {
    @layer daisyui.component {
      padding-inline: calc(0.25rem * 3);
      padding-block: calc(0.25rem * 2);
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }
      font-size: 0.875rem;
      font-weight: 600;
    }
  }
  .select-lg {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 12);
      font-size: 1.125rem;
      option {
        padding-inline: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 1.5);
      }
    }
  }
  .select-md {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 10);
      font-size: 0.875rem;
      option {
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 1.5);
      }
    }
  }
  .select-sm {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 8);
      font-size: 0.75rem;
      option {
        padding-inline: calc(0.25rem * 2.5);
        padding-block: calc(0.25rem * 1);
      }
    }
  }
  .select-xs {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 6);
      font-size: 0.6875rem;
      option {
        padding-inline: calc(0.25rem * 2);
        padding-block: calc(0.25rem * 1);
      }
    }
  }
  .table-lg {
    @layer daisyui.modifier {
      :not(thead, tfoot) tr {
        font-size: 1.125rem;
      }
      :where(th, td) {
        padding-inline: calc(0.25rem * 5);
        padding-block: calc(0.25rem * 4);
      }
    }
  }
  .table-md {
    @layer daisyui.modifier {
      :not(thead, tfoot) tr {
        font-size: 0.875rem;
      }
      :where(th, td) {
        padding-inline: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 3);
      }
    }
  }
  .table-sm {
    @layer daisyui.modifier {
      :not(thead, tfoot) tr {
        font-size: 0.75rem;
      }
      :where(th, td) {
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 2);
      }
    }
  }
  .table-xs {
    @layer daisyui.modifier {
      :not(thead, tfoot) tr {
        font-size: 0.6875rem;
      }
      :where(th, td) {
        padding-inline: calc(0.25rem * 2);
        padding-block: calc(0.25rem * 1);
      }
    }
  }
  .badge-lg {
    @layer daisyui.modifier {
      --size: calc(var(--size-selector, 0.25rem) * 7);
      font-size: 1rem;
      padding-inline: calc(0.25rem * 3.5 - var(--border));
    }
  }
  .badge-md {
    @layer daisyui.modifier {
      --size: calc(var(--size-selector, 0.25rem) * 6);
      font-size: 0.875rem;
      padding-inline: calc(0.25rem * 3 - var(--border));
    }
  }
  .badge-sm {
    @layer daisyui.modifier {
      --size: calc(var(--size-selector, 0.25rem) * 5);
      font-size: 0.75rem;
      padding-inline: calc(0.25rem * 2.5 - var(--border));
    }
  }
  .badge-xs {
    @layer daisyui.modifier {
      --size: calc(var(--size-selector, 0.25rem) * 4);
      font-size: 0.625rem;
      padding-inline: calc(0.25rem * 2 - var(--border));
    }
  }
  .px-0 {
    padding-inline: calc(var(--spacing) * 0);
  }
  .px-1 {
    padding-inline: calc(var(--spacing) * 1);
  }
  .px-1\.5 {
    padding-inline: calc(var(--spacing) * 1.5);
  }
  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }
  .px-3 {
    padding-inline: calc(var(--spacing) * 3);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .px-6 {
    padding-inline: calc(var(--spacing) * 6);
  }
  .py-0 {
    padding-block: calc(var(--spacing) * 0);
  }
  .py-0\.5 {
    padding-block: calc(var(--spacing) * 0.5);
  }
  .py-1 {
    padding-block: calc(var(--spacing) * 1);
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .py-3 {
    padding-block: calc(var(--spacing) * 3);
  }
  .py-4 {
    padding-block: calc(var(--spacing) * 4);
  }
  .py-6 {
    padding-block: calc(var(--spacing) * 6);
  }
  .py-10 {
    padding-block: calc(var(--spacing) * 10);
  }
  .pt-0 {
    padding-top: calc(var(--spacing) * 0);
  }
  .pt-2 {
    padding-top: calc(var(--spacing) * 2);
  }
  .pt-3 {
    padding-top: calc(var(--spacing) * 3);
  }
  .pt-4 {
    padding-top: calc(var(--spacing) * 4);
  }
  .pr-3 {
    padding-right: calc(var(--spacing) * 3);
  }
  .pr-4 {
    padding-right: calc(var(--spacing) * 4);
  }
  .pr-10 {
    padding-right: calc(var(--spacing) * 10);
  }
  .pb-6 {
    padding-bottom: calc(var(--spacing) * 6);
  }
  .pb-8 {
    padding-bottom: calc(var(--spacing) * 8);
  }
  .pl-0 {
    padding-left: calc(var(--spacing) * 0);
  }
  .pl-2 {
    padding-left: calc(var(--spacing) * 2);
  }
  .pl-3 {
    padding-left: calc(var(--spacing) * 3);
  }
  .pl-4 {
    padding-left: calc(var(--spacing) * 4);
  }
  .text-center {
    text-align: center;
  }
  .text-end {
    text-align: end;
  }
  .text-justify {
    text-align: justify;
  }
  .text-left {
    text-align: left;
  }
  .text-right {
    text-align: right;
  }
  .text-start {
    text-align: start;
  }
  .align-baseline {
    vertical-align: baseline;
  }
  .align-bottom {
    vertical-align: bottom;
  }
  .align-middle {
    vertical-align: middle;
  }
  .align-sub {
    vertical-align: sub;
  }
  .align-super {
    vertical-align: super;
  }
  .align-text-bottom {
    vertical-align: text-bottom;
  }
  .align-text-top {
    vertical-align: text-top;
  }
  .align-top {
    vertical-align: top;
  }
  .font-mono {
    font-family: var(--font-mono);
  }
  .font-sans {
    font-family: var(--font-sans);
  }
  .file-input-lg {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 12);
      font-size: 1.125rem;
      line-height: 2.5rem;
      &::file-selector-button {
        font-size: 1.125rem;
      }
    }
  }
  .file-input-md {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 10);
      font-size: 0.875rem;
      line-height: 2;
      &::file-selector-button {
        font-size: 0.875rem;
      }
    }
  }
  .file-input-sm {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 8);
      font-size: 0.75rem;
      line-height: 1.5rem;
      &::file-selector-button {
        font-size: 0.75rem;
      }
    }
  }
  .file-input-xs {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 6);
      font-size: 0.6875rem;
      line-height: 1rem;
      &::file-selector-button {
        font-size: 0.6875rem;
      }
    }
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }
  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }
  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .tabs-lg {
    @layer daisyui.modifier {
      --tab-height: calc(var(--size-field, 0.25rem) * 12);
      :where(.tab) {
        font-size: 1.125rem;
        --tab-p: 1rem;
        --tab-radius-min: calc(1.5rem - var(--border));
      }
    }
  }
  .tabs-md {
    @layer daisyui.modifier {
      --tab-height: calc(var(--size-field, 0.25rem) * 10);
      :where(.tab) {
        font-size: 0.875rem;
        --tab-p: 0.75rem;
        --tab-radius-min: calc(0.75rem - var(--border));
      }
    }
  }
  .tabs-sm {
    @layer daisyui.modifier {
      --tab-height: calc(var(--size-field, 0.25rem) * 8);
      :where(.tab) {
        font-size: 0.875rem;
        --tab-p: 0.5rem;
        --tab-radius-min: calc(0.5rem - var(--border));
      }
    }
  }
  .tabs-xs {
    @layer daisyui.modifier {
      --tab-height: calc(var(--size-field, 0.25rem) * 6);
      :where(.tab) {
        font-size: 0.75rem;
        --tab-p: 0.375rem;
        --tab-radius-min: calc(0.5rem - var(--border));
      }
    }
  }
  .kbd-lg {
    @layer daisyui.modifier {
      --size: calc(var(--size-selector, 0.25rem) * 7);
      font-size: 1rem;
    }
  }
  .kbd-md {
    @layer daisyui.modifier {
      --size: calc(var(--size-selector, 0.25rem) * 6);
      font-size: 0.875rem;
    }
  }
  .kbd-sm {
    @layer daisyui.modifier {
      --size: calc(var(--size-selector, 0.25rem) * 5);
      font-size: 0.75rem;
    }
  }
  .kbd-xs {
    @layer daisyui.modifier {
      --size: calc(var(--size-selector, 0.25rem) * 4);
      font-size: 0.625rem;
    }
  }
  .textarea-lg {
    @layer daisyui.modifier {
      font-size: max(var(--font-size, 1.125rem), 1.125rem);
    }
  }
  .textarea-md {
    @layer daisyui.modifier {
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
    }
  }
  .textarea-sm {
    @layer daisyui.modifier {
      font-size: max(var(--font-size, 0.75rem), 0.75rem);
    }
  }
  .textarea-xs {
    @layer daisyui.modifier {
      font-size: max(var(--font-size, 0.6875rem), 0.6875rem);
    }
  }
  .leading-5 {
    --tw-leading: calc(var(--spacing) * 5);
    line-height: calc(var(--spacing) * 5);
  }
  .leading-6 {
    --tw-leading: calc(var(--spacing) * 6);
    line-height: calc(var(--spacing) * 6);
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-light {
    --tw-font-weight: var(--font-weight-light);
    font-weight: var(--font-weight-light);
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .tracking-wide {
    --tw-tracking: var(--tracking-wide);
    letter-spacing: var(--tracking-wide);
  }
  .text-wrap {
    text-wrap: wrap;
  }
  .break-normal {
    overflow-wrap: normal;
    word-break: normal;
  }
  .break-words {
    overflow-wrap: break-word;
  }
  .break-all {
    word-break: break-all;
  }
  .break-keep {
    word-break: keep-all;
  }
  .overflow-ellipsis {
    text-overflow: ellipsis;
  }
  .text-clip {
    text-overflow: clip;
  }
  .text-ellipsis {
    text-overflow: ellipsis;
  }
  .hyphens-auto {
    -webkit-hyphens: auto;
    hyphens: auto;
  }
  .hyphens-manual {
    -webkit-hyphens: manual;
    hyphens: manual;
  }
  .hyphens-none {
    -webkit-hyphens: none;
    hyphens: none;
  }
  .whitespace-break-spaces {
    white-space: break-spaces;
  }
  .whitespace-normal {
    white-space: normal;
  }
  .whitespace-nowrap {
    white-space: nowrap;
  }
  .whitespace-pre {
    white-space: pre;
  }
  .whitespace-pre-line {
    white-space: pre-line;
  }
  .whitespace-pre-wrap {
    white-space: pre-wrap;
  }
  .alert-error {
    @layer daisyui.modifier {
      color: var(--color-error-content);
      --alert-border-color: var(--color-error);
      --alert-color: var(--color-error);
    }
  }
  .alert-info {
    @layer daisyui.modifier {
      color: var(--color-info-content);
      --alert-border-color: var(--color-info);
      --alert-color: var(--color-info);
    }
  }
  .alert-success {
    @layer daisyui.modifier {
      color: var(--color-success-content);
      --alert-border-color: var(--color-success);
      --alert-color: var(--color-success);
    }
  }
  .alert-warning {
    @layer daisyui.modifier {
      color: var(--color-warning-content);
      --alert-border-color: var(--color-warning);
      --alert-color: var(--color-warning);
    }
  }
  .file-input-accent {
    @layer daisyui.modifier {
      --btn-color: var(--color-accent);
      &::file-selector-button {
        color: var(--color-accent-content);
      }
      &, &:focus, &:focus-within {
        --input-color: var(--color-accent);
      }
    }
  }
  .file-input-error {
    @layer daisyui.modifier {
      --btn-color: var(--color-error);
      &::file-selector-button {
        color: var(--color-error-content);
      }
      &, &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .file-input-info {
    @layer daisyui.modifier {
      --btn-color: var(--color-info);
      &::file-selector-button {
        color: var(--color-info-content);
      }
      &, &:focus, &:focus-within {
        --input-color: var(--color-info);
      }
    }
  }
  .file-input-primary {
    @layer daisyui.modifier {
      --btn-color: var(--color-primary);
      &::file-selector-button {
        color: var(--color-primary-content);
      }
      &, &:focus, &:focus-within {
        --input-color: var(--color-primary);
      }
    }
  }
  .file-input-secondary {
    @layer daisyui.modifier {
      --btn-color: var(--color-secondary);
      &::file-selector-button {
        color: var(--color-secondary-content);
      }
      &, &:focus, &:focus-within {
        --input-color: var(--color-secondary);
      }
    }
  }
  .file-input-success {
    @layer daisyui.modifier {
      --btn-color: var(--color-success);
      &::file-selector-button {
        color: var(--color-success-content);
      }
      &, &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
  }
  .file-input-warning {
    @layer daisyui.modifier {
      --btn-color: var(--color-warning);
      &::file-selector-button {
        color: var(--color-warning-content);
      }
      &, &:focus, &:focus-within {
        --input-color: var(--color-warning);
      }
    }
  }
  .checkbox-accent {
    @layer daisyui.modifier {
      color: var(--color-accent-content);
      --input-color: var(--color-accent);
    }
  }
  .checkbox-error {
    @layer daisyui.modifier {
      color: var(--color-error-content);
      --input-color: var(--color-error);
    }
  }
  .checkbox-info {
    @layer daisyui.modifier {
      color: var(--color-info-content);
      --input-color: var(--color-info);
    }
  }
  .checkbox-primary {
    @layer daisyui.modifier {
      color: var(--color-primary-content);
      --input-color: var(--color-primary);
    }
  }
  .checkbox-secondary {
    @layer daisyui.modifier {
      color: var(--color-secondary-content);
      --input-color: var(--color-secondary);
    }
  }
  .checkbox-success {
    @layer daisyui.modifier {
      color: var(--color-success-content);
      --input-color: var(--color-success);
    }
  }
  .checkbox-warning {
    @layer daisyui.modifier {
      color: var(--color-warning-content);
      --input-color: var(--color-warning);
    }
  }
  .link-accent {
    @layer daisyui.modifier {
      color: var(--color-accent);
      @media (hover: hover) {
        &:hover {
          color: var(--color-accent);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-accent) 80%, #000);
          }
        }
      }
    }
  }
  .link-error {
    @layer daisyui.modifier {
      color: var(--color-error);
      @media (hover: hover) {
        &:hover {
          color: var(--color-error);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-error) 80%, #000);
          }
        }
      }
    }
  }
  .link-info {
    @layer daisyui.modifier {
      color: var(--color-info);
      @media (hover: hover) {
        &:hover {
          color: var(--color-info);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-info) 80%, #000);
          }
        }
      }
    }
  }
  .link-neutral {
    @layer daisyui.modifier {
      color: var(--color-neutral);
      @media (hover: hover) {
        &:hover {
          color: var(--color-neutral);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-neutral) 80%, #000);
          }
        }
      }
    }
  }
  .link-primary {
    @layer daisyui.modifier {
      color: var(--color-primary);
      @media (hover: hover) {
        &:hover {
          color: var(--color-primary);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-primary) 80%, #000);
          }
        }
      }
    }
  }
  .link-secondary {
    @layer daisyui.modifier {
      color: var(--color-secondary);
      @media (hover: hover) {
        &:hover {
          color: var(--color-secondary);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-secondary) 80%, #000);
          }
        }
      }
    }
  }
  .link-success {
    @layer daisyui.modifier {
      color: var(--color-success);
      @media (hover: hover) {
        &:hover {
          color: var(--color-success);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-success) 80%, #000);
          }
        }
      }
    }
  }
  .link-warning {
    @layer daisyui.modifier {
      color: var(--color-warning);
      @media (hover: hover) {
        &:hover {
          color: var(--color-warning);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-warning) 80%, #000);
          }
        }
      }
    }
  }
  .range-accent {
    @layer daisyui.modifier {
      color: var(--color-accent);
      --range-thumb: var(--color-accent-content);
    }
  }
  .range-error {
    @layer daisyui.modifier {
      color: var(--color-error);
      --range-thumb: var(--color-error-content);
    }
  }
  .range-info {
    @layer daisyui.modifier {
      color: var(--color-info);
      --range-thumb: var(--color-info-content);
    }
  }
  .range-primary {
    @layer daisyui.modifier {
      color: var(--color-primary);
      --range-thumb: var(--color-primary-content);
    }
  }
  .range-secondary {
    @layer daisyui.modifier {
      color: var(--color-secondary);
      --range-thumb: var(--color-secondary-content);
    }
  }
  .range-success {
    @layer daisyui.modifier {
      color: var(--color-success);
      --range-thumb: var(--color-success-content);
    }
  }
  .range-warning {
    @layer daisyui.modifier {
      color: var(--color-warning);
      --range-thumb: var(--color-warning-content);
    }
  }
  .tooltip-accent {
    @layer daisyui.modifier {
      --tt-bg: var(--color-accent);
      > .tooltip-content, &[data-tip]:before {
        color: var(--color-accent-content);
      }
    }
  }
  .tooltip-error {
    @layer daisyui.modifier {
      --tt-bg: var(--color-error);
      > .tooltip-content, &[data-tip]:before {
        color: var(--color-error-content);
      }
    }
  }
  .tooltip-info {
    @layer daisyui.modifier {
      --tt-bg: var(--color-info);
      > .tooltip-content, &[data-tip]:before {
        color: var(--color-info-content);
      }
    }
  }
  .tooltip-primary {
    @layer daisyui.modifier {
      --tt-bg: var(--color-primary);
      > .tooltip-content, &[data-tip]:before {
        color: var(--color-primary-content);
      }
    }
  }
  .tooltip-secondary {
    @layer daisyui.modifier {
      --tt-bg: var(--color-secondary);
      > .tooltip-content, &[data-tip]:before {
        color: var(--color-secondary-content);
      }
    }
  }
  .tooltip-success {
    @layer daisyui.modifier {
      --tt-bg: var(--color-success);
      > .tooltip-content, &[data-tip]:before {
        color: var(--color-success-content);
      }
    }
  }
  .tooltip-warning {
    @layer daisyui.modifier {
      --tt-bg: var(--color-warning);
      > .tooltip-content, &[data-tip]:before {
        color: var(--color-warning-content);
      }
    }
  }
  .text-\[var\(--header-text\)\] {
    color: var(--header-text);
  }
  .text-\[var\(--tag-color\)\] {
    color: var(--tag-color);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-base-content\/40 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .text-base-content\/60 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  .text-base-content\/70 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 70%, transparent);
    }
  }
  .text-base-content\/80 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .text-gray-300 {
    color: var(--color-gray-300);
  }
  .text-gray-400 {
    color: var(--color-gray-400);
  }
  .text-gray-500 {
    color: var(--color-gray-500);
  }
  .text-gray-700 {
    color: var(--color-gray-700);
  }
  .text-primary {
    color: var(--color-primary);
  }
  .text-red-500 {
    color: var(--color-red-500);
  }
  .text-slate-400 {
    color: var(--color-slate-400);
  }
  .text-slate-500 {
    color: var(--color-slate-500);
  }
  .text-slate-700 {
    color: var(--color-slate-700);
  }
  .text-white {
    color: var(--color-white);
  }
  .capitalize {
    text-transform: capitalize;
  }
  .lowercase {
    text-transform: lowercase;
  }
  .normal-case {
    text-transform: none;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .italic {
    font-style: italic;
  }
  .not-italic {
    font-style: normal;
  }
  .diagonal-fractions {
    --tw-numeric-fraction: diagonal-fractions;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .lining-nums {
    --tw-numeric-figure: lining-nums;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .oldstyle-nums {
    --tw-numeric-figure: oldstyle-nums;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .ordinal {
    --tw-ordinal: ordinal;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .proportional-nums {
    --tw-numeric-spacing: proportional-nums;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .slashed-zero {
    --tw-slashed-zero: slashed-zero;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .stacked-fractions {
    --tw-numeric-fraction: stacked-fractions;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .tabular-nums {
    --tw-numeric-spacing: tabular-nums;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .normal-nums {
    font-variant-numeric: normal;
  }
  .btn-link {
    @layer daisyui.modifier {
      text-decoration-line: underline;
      outline-color: currentcolor;
      --btn-border: #0000;
      --btn-bg: #0000;
      --btn-fg: var(--color-primary);
      --btn-noise: none;
      --btn-shadow: "";
      &:is(.btn-active, :hover, :active:focus, :focus-visible) {
        text-decoration-line: underline;
        --btn-border: #0000;
        --btn-bg: #0000;
      }
      @media (hover: none) {
        &:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
          text-decoration-line: none;
        }
      }
    }
  }
  .link-hover {
    @layer daisyui.modifier {
      text-decoration-line: none;
      &:hover {
        @media (hover: hover) {
          text-decoration-line: underline;
        }
      }
    }
  }
  .line-through {
    text-decoration-line: line-through;
  }
  .no-underline {
    text-decoration-line: none;
  }
  .overline {
    text-decoration-line: overline;
  }
  .underline {
    text-decoration-line: underline;
  }
  .decoration-dashed {
    text-decoration-style: dashed;
  }
  .decoration-dotted {
    text-decoration-style: dotted;
  }
  .decoration-double {
    text-decoration-style: double;
  }
  .decoration-solid {
    text-decoration-style: solid;
  }
  .decoration-wavy {
    text-decoration-style: wavy;
  }
  .antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  .subpixel-antialiased {
    -webkit-font-smoothing: auto;
    -moz-osx-font-smoothing: auto;
  }
  .placeholder-slate-400 {
    &::placeholder {
      color: var(--color-slate-400);
    }
  }
  .swap-active {
    @layer daisyui.modifier {
      .swap-off {
        opacity: 0%;
      }
      .swap-on {
        opacity: 100%;
      }
    }
  }
  .opacity-0 {
    opacity: 0%;
  }
  .opacity-10 {
    opacity: 10%;
  }
  .opacity-30 {
    opacity: 30%;
  }
  .opacity-60 {
    opacity: 60%;
  }
  .opacity-70 {
    opacity: 70%;
  }
  .opacity-80 {
    opacity: 80%;
  }
  .opacity-100 {
    opacity: 100%;
  }
  .bg-blend-color {
    background-blend-mode: color;
  }
  .bg-blend-color-burn {
    background-blend-mode: color-burn;
  }
  .bg-blend-color-dodge {
    background-blend-mode: color-dodge;
  }
  .bg-blend-darken {
    background-blend-mode: darken;
  }
  .bg-blend-difference {
    background-blend-mode: difference;
  }
  .bg-blend-exclusion {
    background-blend-mode: exclusion;
  }
  .bg-blend-hard-light {
    background-blend-mode: hard-light;
  }
  .bg-blend-hue {
    background-blend-mode: hue;
  }
  .bg-blend-lighten {
    background-blend-mode: lighten;
  }
  .bg-blend-luminosity {
    background-blend-mode: luminosity;
  }
  .bg-blend-multiply {
    background-blend-mode: multiply;
  }
  .bg-blend-normal {
    background-blend-mode: normal;
  }
  .bg-blend-overlay {
    background-blend-mode: overlay;
  }
  .bg-blend-saturation {
    background-blend-mode: saturation;
  }
  .bg-blend-screen {
    background-blend-mode: screen;
  }
  .bg-blend-soft-light {
    background-blend-mode: soft-light;
  }
  .mix-blend-color {
    mix-blend-mode: color;
  }
  .mix-blend-color-burn {
    mix-blend-mode: color-burn;
  }
  .mix-blend-color-dodge {
    mix-blend-mode: color-dodge;
  }
  .mix-blend-darken {
    mix-blend-mode: darken;
  }
  .mix-blend-difference {
    mix-blend-mode: difference;
  }
  .mix-blend-exclusion {
    mix-blend-mode: exclusion;
  }
  .mix-blend-hard-light {
    mix-blend-mode: hard-light;
  }
  .mix-blend-hue {
    mix-blend-mode: hue;
  }
  .mix-blend-lighten {
    mix-blend-mode: lighten;
  }
  .mix-blend-luminosity {
    mix-blend-mode: luminosity;
  }
  .mix-blend-multiply {
    mix-blend-mode: multiply;
  }
  .mix-blend-normal {
    mix-blend-mode: normal;
  }
  .mix-blend-overlay {
    mix-blend-mode: overlay;
  }
  .mix-blend-plus-lighter {
    mix-blend-mode: plus-lighter;
  }
  .mix-blend-saturation {
    mix-blend-mode: saturation;
  }
  .mix-blend-screen {
    mix-blend-mode: screen;
  }
  .mix-blend-soft-light {
    mix-blend-mode: soft-light;
  }
  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-2xl {
    --tw-shadow: 0 25px 50px -12px var(--tw-shadow-color, rgb(0 0 0 / 0.25));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-md {
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-sm {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .ring {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .ring-1 {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-base-200 {
    --tw-shadow-color: var(--color-base-200);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-shadow-color: color-mix(in oklab, var(--color-base-200) var(--tw-shadow-alpha), transparent);
    }
  }
  .ring-gray-300 {
    --tw-ring-color: var(--color-gray-300);
  }
  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .outline-1 {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .outline-offset-4 {
    outline-offset: 4px;
  }
  .btn-ghost {
    @layer daisyui.modifier {
      &:not(.btn-active, :hover, :active:focus, :focus-visible) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-border: #0000;
        --btn-noise: none;
        &:not(:disabled, [disabled], .btn-disabled) {
          outline-color: currentcolor;
          --btn-fg: currentColor;
        }
      }
      @media (hover: none) {
        &:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
          --btn-shadow: "";
          --btn-bg: #0000;
          --btn-border: #0000;
          --btn-noise: none;
          --btn-fg: currentColor;
        }
      }
    }
  }
  .outline-base-content {
    outline-color: var(--color-base-content);
  }
  .outline-black\/5 {
    outline-color: color-mix(in srgb, #000 5%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      outline-color: color-mix(in oklab, var(--color-black) 5%, transparent);
    }
  }
  .blur {
    --tw-blur: blur(8px);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .blur-3xl {
    --tw-blur: blur(var(--blur-3xl));
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .drop-shadow {
    --tw-drop-shadow-size: drop-shadow(0 1px 2px var(--tw-drop-shadow-color, rgb(0 0 0 / 0.1))) drop-shadow(0 1px 1px var(--tw-drop-shadow-color, rgb(0 0 0 / 0.06)));
    --tw-drop-shadow: drop-shadow(0 1px 2px rgb(0 0 0 / 0.1)) drop-shadow( 0 1px 1px rgb(0 0 0 / 0.06));
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .grayscale {
    --tw-grayscale: grayscale(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .invert {
    --tw-invert: invert(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .sepia {
    --tw-sepia: sepia(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .filter\! {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,) !important;
  }
  .filter-none {
    filter: none;
  }
  .backdrop-blur {
    --tw-backdrop-blur: blur(8px);
    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
  }
  .backdrop-grayscale {
    --tw-backdrop-grayscale: grayscale(100%);
    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
  }
  .backdrop-invert {
    --tw-backdrop-invert: invert(100%);
    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
  }
  .backdrop-sepia {
    --tw-backdrop-sepia: sepia(100%);
    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
  }
  .backdrop-filter {
    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
  }
  .backdrop-filter-none {
    -webkit-backdrop-filter: none;
    backdrop-filter: none;
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-opacity {
    transition-property: opacity;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-shadow {
    transition-property: box-shadow;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-transform {
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .duration-100 {
    --tw-duration: 100ms;
    transition-duration: 100ms;
  }
  .duration-200 {
    --tw-duration: 200ms;
    transition-duration: 200ms;
  }
  .duration-300 {
    --tw-duration: 300ms;
    transition-duration: 300ms;
  }
  .duration-500 {
    --tw-duration: 500ms;
    transition-duration: 500ms;
  }
  .ease-in {
    --tw-ease: var(--ease-in);
    transition-timing-function: var(--ease-in);
  }
  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }
  .ease-out {
    --tw-ease: var(--ease-out);
    transition-timing-function: var(--ease-out);
  }
  .btn-outline {
    @layer daisyui.modifier {
      &:not( .btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-fg: var(--btn-color);
        --btn-border: var(--btn-color);
        --btn-noise: none;
      }
      @media (hover: none) {
        &:hover:not( .btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
          --btn-shadow: "";
          --btn-bg: #0000;
          --btn-fg: var(--btn-color);
          --btn-border: var(--btn-color);
          --btn-noise: none;
        }
      }
    }
  }
  .btn-lg {
    @layer daisyui.modifier {
      --fontsize: 1.125rem;
      --btn-p: 1.25rem;
      --size: calc(var(--size-field, 0.25rem) * 12);
    }
  }
  .btn-md {
    @layer daisyui.modifier {
      --fontsize: 0.875rem;
      --btn-p: 1rem;
      --size: calc(var(--size-field, 0.25rem) * 10);
    }
  }
  .btn-sm {
    @layer daisyui.modifier {
      --fontsize: 0.75rem;
      --btn-p: 0.75rem;
      --size: calc(var(--size-field, 0.25rem) * 8);
    }
  }
  .btn-xs {
    @layer daisyui.modifier {
      --fontsize: 0.6875rem;
      --btn-p: 0.5rem;
      --size: calc(var(--size-field, 0.25rem) * 6);
    }
  }
  .badge-accent {
    @layer daisyui.modifier {
      --badge-color: var(--color-accent);
      --badge-fg: var(--color-accent-content);
    }
  }
  .badge-error {
    @layer daisyui.modifier {
      --badge-color: var(--color-error);
      --badge-fg: var(--color-error-content);
    }
  }
  .badge-info {
    @layer daisyui.modifier {
      --badge-color: var(--color-info);
      --badge-fg: var(--color-info-content);
    }
  }
  .badge-neutral {
    @layer daisyui.modifier {
      --badge-color: var(--color-neutral);
      --badge-fg: var(--color-neutral-content);
    }
  }
  .badge-primary {
    @layer daisyui.modifier {
      --badge-color: var(--color-primary);
      --badge-fg: var(--color-primary-content);
    }
  }
  .badge-secondary {
    @layer daisyui.modifier {
      --badge-color: var(--color-secondary);
      --badge-fg: var(--color-secondary-content);
    }
  }
  .badge-success {
    @layer daisyui.modifier {
      --badge-color: var(--color-success);
      --badge-fg: var(--color-success-content);
    }
  }
  .badge-warning {
    @layer daisyui.modifier {
      --badge-color: var(--color-warning);
      --badge-fg: var(--color-warning-content);
    }
  }
  .btn-accent {
    @layer daisyui.modifier {
      --btn-color: var(--color-accent);
      --btn-fg: var(--color-accent-content);
    }
  }
  .btn-error {
    @layer daisyui.modifier {
      --btn-color: var(--color-error);
      --btn-fg: var(--color-error-content);
    }
  }
  .btn-info {
    @layer daisyui.modifier {
      --btn-color: var(--color-info);
      --btn-fg: var(--color-info-content);
    }
  }
  .btn-neutral {
    @layer daisyui.modifier {
      --btn-color: var(--color-neutral);
      --btn-fg: var(--color-neutral-content);
    }
  }
  .btn-primary {
    @layer daisyui.modifier {
      --btn-color: var(--color-primary);
      --btn-fg: var(--color-primary-content);
    }
  }
  .btn-secondary {
    @layer daisyui.modifier {
      --btn-color: var(--color-secondary);
      --btn-fg: var(--color-secondary-content);
    }
  }
  .btn-success {
    @layer daisyui.modifier {
      --btn-color: var(--color-success);
      --btn-fg: var(--color-success-content);
    }
  }
  .btn-warning {
    @layer daisyui.modifier {
      --btn-color: var(--color-warning);
      --btn-fg: var(--color-warning-content);
    }
  }
  .outline-dashed {
    --tw-outline-style: dashed;
    outline-style: dashed;
  }
  .outline-dotted {
    --tw-outline-style: dotted;
    outline-style: dotted;
  }
  .outline-double {
    --tw-outline-style: double;
    outline-style: double;
  }
  .outline-none {
    --tw-outline-style: none;
    outline-style: none;
  }
  .select-all {
    -webkit-user-select: all;
    user-select: all;
  }
  .select-auto {
    -webkit-user-select: auto;
    user-select: auto;
  }
  .select-none {
    -webkit-user-select: none;
    user-select: none;
  }
  .select-text {
    -webkit-user-select: text;
    user-select: text;
  }
  .divide-x-reverse {
    :where(& > :not(:last-child)) {
      --tw-divide-x-reverse: 1;
    }
  }
  .input-accent {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-accent);
      }
    }
  }
  .input-error {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .input-info {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-info);
      }
    }
  }
  .input-primary {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-primary);
      }
    }
  }
  .input-secondary {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-secondary);
      }
    }
  }
  .input-success {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
  }
  .input-warning {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-warning);
      }
    }
  }
  .radio-accent {
    @layer daisyui.modifier {
      --input-color: var(--color-accent);
    }
  }
  .radio-error {
    @layer daisyui.modifier {
      --input-color: var(--color-error);
    }
  }
  .radio-info {
    @layer daisyui.modifier {
      --input-color: var(--color-info);
    }
  }
  .radio-primary {
    @layer daisyui.modifier {
      --input-color: var(--color-primary);
    }
  }
  .radio-secondary {
    @layer daisyui.modifier {
      --input-color: var(--color-secondary);
    }
  }
  .radio-success {
    @layer daisyui.modifier {
      --input-color: var(--color-success);
    }
  }
  .radio-warning {
    @layer daisyui.modifier {
      --input-color: var(--color-warning);
    }
  }
  .range-lg {
    @layer daisyui.modifier {
      --range-thumb-size: calc(var(--size-selector, 0.25rem) * 7);
    }
  }
  .range-md {
    @layer daisyui.modifier {
      --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
    }
  }
  .range-sm {
    @layer daisyui.modifier {
      --range-thumb-size: calc(var(--size-selector, 0.25rem) * 5);
    }
  }
  .range-xs {
    @layer daisyui.modifier {
      --range-thumb-size: calc(var(--size-selector, 0.25rem) * 4);
    }
  }
  .ring-inset {
    --tw-ring-inset: inset;
  }
  .select-accent {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-accent);
      }
    }
  }
  .select-error {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .select-info {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-info);
      }
    }
  }
  .select-primary {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-primary);
      }
    }
  }
  .select-secondary {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-secondary);
      }
    }
  }
  .select-success {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
  }
  .select-warning {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-warning);
      }
    }
  }
  .textarea-accent {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-accent);
      }
    }
  }
  .textarea-error {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .textarea-info {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-info);
      }
    }
  }
  .textarea-primary {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-primary);
      }
    }
  }
  .textarea-secondary {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-secondary);
      }
    }
  }
  .textarea-success {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
  }
  .textarea-warning {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-warning);
      }
    }
  }
  .toggle-lg {
    @layer daisyui.modifier {
      &:is([type="checkbox"]), &:has([type="checkbox"]) {
        --size: calc(var(--size-selector, 0.25rem) * 7);
      }
    }
  }
  .toggle-md {
    @layer daisyui.modifier {
      &:is([type="checkbox"]), &:has([type="checkbox"]) {
        --size: calc(var(--size-selector, 0.25rem) * 6);
      }
    }
  }
  .toggle-sm {
    @layer daisyui.modifier {
      &:is([type="checkbox"]), &:has([type="checkbox"]) {
        --size: calc(var(--size-selector, 0.25rem) * 5);
      }
    }
  }
  .toggle-xs {
    @layer daisyui.modifier {
      &:is([type="checkbox"]), &:has([type="checkbox"]) {
        --size: calc(var(--size-selector, 0.25rem) * 4);
      }
    }
  }
  .group-hover\:translate-x-3 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        --tw-translate-x: calc(var(--spacing) * 3);
        translate: var(--tw-translate-x) var(--tw-translate-y);
      }
    }
  }
  .group-hover\:bg-primary {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        background-color: var(--color-primary);
      }
    }
  }
  .group-hover\:text-gray-500 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        color: var(--color-gray-500);
      }
    }
  }
  .group-hover\:text-primary {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        color: var(--color-primary);
      }
    }
  }
  .group-hover\:opacity-100 {
    &:is(:where(.group):hover *) {
      @media (hover: hover) {
        opacity: 100%;
      }
    }
  }
  .peer-hover\:text-primary {
    &:is(:where(.peer):hover ~ *) {
      @media (hover: hover) {
        color: var(--color-primary);
      }
    }
  }
  .hover\:-translate-y-2 {
    &:hover {
      @media (hover: hover) {
        --tw-translate-y: calc(var(--spacing) * -2);
        translate: var(--tw-translate-x) var(--tw-translate-y);
      }
    }
  }
  .hover\:border-primary\/50 {
    &:hover {
      @media (hover: hover) {
        border-color: var(--color-primary);
        @supports (color: color-mix(in lab, red, red)) {
          border-color: color-mix(in oklab, var(--color-primary) 50%, transparent);
        }
      }
    }
  }
  .hover\:border-slate-500 {
    &:hover {
      @media (hover: hover) {
        border-color: var(--color-slate-500);
      }
    }
  }
  .hover\:bg-\[var\(--tag-color\)\] {
    &:hover {
      @media (hover: hover) {
        background-color: var(--tag-color);
      }
    }
  }
  .hover\:bg-accent-100 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-accent-100);
      }
    }
  }
  .hover\:bg-accent-200 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-accent-200);
      }
    }
  }
  .hover\:bg-base-300 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-base-300);
      }
    }
  }
  .hover\:bg-base-content\/5 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
        }
      }
    }
  }
  .hover\:bg-gray-50 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-gray-50);
      }
    }
  }
  .hover\:bg-neutral {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-neutral);
      }
    }
  }
  .hover\:bg-primary {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-primary);
      }
    }
  }
  .hover\:text-neutral-content {
    &:hover {
      @media (hover: hover) {
        color: var(--color-neutral-content);
      }
    }
  }
  .hover\:text-primary {
    &:hover {
      @media (hover: hover) {
        color: var(--color-primary);
      }
    }
  }
  .hover\:text-primary-content {
    &:hover {
      @media (hover: hover) {
        color: var(--color-primary-content);
      }
    }
  }
  .hover\:text-slate-500 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-slate-500);
      }
    }
  }
  .hover\:text-white {
    &:hover {
      @media (hover: hover) {
        color: var(--color-white);
      }
    }
  }
  .hover\:underline {
    &:hover {
      @media (hover: hover) {
        text-decoration-line: underline;
      }
    }
  }
  .focus\:z-20 {
    &:focus {
      z-index: 20;
    }
  }
  .focus\:border-4 {
    &:focus {
      border-style: var(--tw-border-style);
      border-width: 4px;
    }
  }
  .focus\:border-primary {
    &:focus {
      border-color: var(--color-primary);
    }
  }
  .focus\:ring {
    &:focus {
      --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }
  .focus\:ring-0 {
    &:focus {
      --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }
  .focus\:ring-transparent {
    &:focus {
      --tw-ring-color: transparent;
    }
  }
  .focus\:outline-offset-0 {
    &:focus {
      outline-offset: 0px;
    }
  }
  .focus-visible\:outline {
    &:focus-visible {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
    }
  }
  .focus-visible\:outline-2 {
    &:focus-visible {
      outline-style: var(--tw-outline-style);
      outline-width: 2px;
    }
  }
  .focus-visible\:outline-offset-2 {
    &:focus-visible {
      outline-offset: 2px;
    }
  }
  .focus-visible\:outline-primary {
    &:focus-visible {
      outline-color: var(--color-primary);
    }
  }
  .sm\:-top-80 {
    @media (width >= 40rem) {
      top: calc(var(--spacing) * -80);
    }
  }
  .sm\:right-auto {
    @media (width >= 40rem) {
      right: auto;
    }
  }
  .sm\:left-\[calc\(50\%-30rem\)\] {
    @media (width >= 40rem) {
      left: calc(50% - 30rem);
    }
  }
  .sm\:flex {
    @media (width >= 40rem) {
      display: flex;
    }
  }
  .sm\:hidden {
    @media (width >= 40rem) {
      display: none;
    }
  }
  .sm\:inline {
    @media (width >= 40rem) {
      display: inline;
    }
  }
  .sm\:inline-block {
    @media (width >= 40rem) {
      display: inline-block;
    }
  }
  .sm\:w-\[72\.1875rem\] {
    @media (width >= 40rem) {
      width: 72.1875rem;
    }
  }
  .sm\:flex-1 {
    @media (width >= 40rem) {
      flex: 1;
    }
  }
  .sm\:items-center {
    @media (width >= 40rem) {
      align-items: center;
    }
  }
  .sm\:justify-between {
    @media (width >= 40rem) {
      justify-content: space-between;
    }
  }
  .sm\:space-y-8 {
    @media (width >= 40rem) {
      :where(& > :not(:last-child)) {
        --tw-space-y-reverse: 0;
        margin-block-start: calc(calc(var(--spacing) * 8) * var(--tw-space-y-reverse));
        margin-block-end: calc(calc(var(--spacing) * 8) * calc(1 - var(--tw-space-y-reverse)));
      }
    }
  }
  .sm\:px-6 {
    @media (width >= 40rem) {
      padding-inline: calc(var(--spacing) * 6);
    }
  }
  .sm\:px-8 {
    @media (width >= 40rem) {
      padding-inline: calc(var(--spacing) * 8);
    }
  }
  .sm\:py-7 {
    @media (width >= 40rem) {
      padding-block: calc(var(--spacing) * 7);
    }
  }
  .sm\:pl-12 {
    @media (width >= 40rem) {
      padding-left: calc(var(--spacing) * 12);
    }
  }
  .sm\:text-3xl {
    @media (width >= 40rem) {
      font-size: var(--text-3xl);
      line-height: var(--tw-leading, var(--text-3xl--line-height));
    }
  }
  .sm\:text-lg {
    @media (width >= 40rem) {
      font-size: var(--text-lg);
      line-height: var(--tw-leading, var(--text-lg--line-height));
    }
  }
  .md\:top-24 {
    @media (width >= 48rem) {
      top: calc(var(--spacing) * 24);
    }
  }
  .md\:my-0 {
    @media (width >= 48rem) {
      margin-block: calc(var(--spacing) * 0);
    }
  }
  .md\:my-4 {
    @media (width >= 48rem) {
      margin-block: calc(var(--spacing) * 4);
    }
  }
  .md\:my-8 {
    @media (width >= 48rem) {
      margin-block: calc(var(--spacing) * 8);
    }
  }
  .md\:mt-0 {
    @media (width >= 48rem) {
      margin-top: calc(var(--spacing) * 0);
    }
  }
  .md\:mt-8 {
    @media (width >= 48rem) {
      margin-top: calc(var(--spacing) * 8);
    }
  }
  .md\:block {
    @media (width >= 48rem) {
      display: block;
    }
  }
  .md\:flex {
    @media (width >= 48rem) {
      display: flex;
    }
  }
  .md\:hidden {
    @media (width >= 48rem) {
      display: none;
    }
  }
  .md\:inline {
    @media (width >= 48rem) {
      display: inline;
    }
  }
  .md\:h-12 {
    @media (width >= 48rem) {
      height: calc(var(--spacing) * 12);
    }
  }
  .md\:h-\[350px\] {
    @media (width >= 48rem) {
      height: 350px;
    }
  }
  .md\:transform {
    @media (width >= 48rem) {
      transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
    }
  }
  .md\:grid-cols-2 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  .md\:grid-cols-\[var\(--left-sidebar-width\)_1fr\] {
    @media (width >= 48rem) {
      grid-template-columns: var(--left-sidebar-width) 1fr;
    }
  }
  .md\:flex-col {
    @media (width >= 48rem) {
      flex-direction: column;
    }
  }
  .md\:items-center {
    @media (width >= 48rem) {
      align-items: center;
    }
  }
  .md\:justify-between {
    @media (width >= 48rem) {
      justify-content: space-between;
    }
  }
  .md\:justify-center {
    @media (width >= 48rem) {
      justify-content: center;
    }
  }
  .md\:space-y-0 {
    @media (width >= 48rem) {
      :where(& > :not(:last-child)) {
        --tw-space-y-reverse: 0;
        margin-block-start: calc(calc(var(--spacing) * 0) * var(--tw-space-y-reverse));
        margin-block-end: calc(calc(var(--spacing) * 0) * calc(1 - var(--tw-space-y-reverse)));
      }
    }
  }
  .md\:space-x-6 {
    @media (width >= 48rem) {
      :where(& > :not(:last-child)) {
        --tw-space-x-reverse: 0;
        margin-inline-start: calc(calc(var(--spacing) * 6) * var(--tw-space-x-reverse));
        margin-inline-end: calc(calc(var(--spacing) * 6) * calc(1 - var(--tw-space-x-reverse)));
      }
    }
  }
  .md\:border-r {
    @media (width >= 48rem) {
      border-right-style: var(--tw-border-style);
      border-right-width: 1px;
    }
  }
  .md\:border-base-200 {
    @media (width >= 48rem) {
      border-color: var(--color-base-200);
    }
  }
  .md\:p-4 {
    @media (width >= 48rem) {
      padding: calc(var(--spacing) * 4);
    }
  }
  .md\:px-10 {
    @media (width >= 48rem) {
      padding-inline: calc(var(--spacing) * 10);
    }
  }
  .md\:py-4 {
    @media (width >= 48rem) {
      padding-block: calc(var(--spacing) * 4);
    }
  }
  .md\:pt-5 {
    @media (width >= 48rem) {
      padding-top: calc(var(--spacing) * 5);
    }
  }
  .md\:text-right {
    @media (width >= 48rem) {
      text-align: right;
    }
  }
  .md\:text-2xl {
    @media (width >= 48rem) {
      font-size: var(--text-2xl);
      line-height: var(--tw-leading, var(--text-2xl--line-height));
    }
  }
  .md\:text-4xl {
    @media (width >= 48rem) {
      font-size: var(--text-4xl);
      line-height: var(--tw-leading, var(--text-4xl--line-height));
    }
  }
  .md\:text-sm {
    @media (width >= 48rem) {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
    }
  }
  .md\:text-xl {
    @media (width >= 48rem) {
      font-size: var(--text-xl);
      line-height: var(--tw-leading, var(--text-xl--line-height));
    }
  }
  .group-\[\.has-right-feature-block\]\:md\:pr-0 {
    &:is(:where(.group):is(.has-right-feature-block) *) {
      @media (width >= 48rem) {
        padding-right: calc(var(--spacing) * 0);
      }
    }
  }
  .group-\[\.has-toc\]\:md\:pr-0 {
    &:is(:where(.group):is(.has-toc) *) {
      @media (width >= 48rem) {
        padding-right: calc(var(--spacing) * 0);
      }
    }
  }
  .lg\:mt-14 {
    @media (width >= 64rem) {
      margin-top: calc(var(--spacing) * 14);
    }
  }
  .lg\:block {
    @media (width >= 64rem) {
      display: block;
    }
  }
  .lg\:flex {
    @media (width >= 64rem) {
      display: flex;
    }
  }
  .lg\:h-7 {
    @media (width >= 64rem) {
      height: calc(var(--spacing) * 7);
    }
  }
  .lg\:h-14 {
    @media (width >= 64rem) {
      height: calc(var(--spacing) * 14);
    }
  }
  .lg\:w-7 {
    @media (width >= 64rem) {
      width: calc(var(--spacing) * 7);
    }
  }
  .lg\:max-w-none {
    @media (width >= 64rem) {
      max-width: none;
    }
  }
  .lg\:grid-cols-3 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  .lg\:grid-cols-\[1fr\] {
    @media (width >= 64rem) {
      grid-template-columns: 1fr;
    }
  }
  .lg\:justify-end {
    @media (width >= 64rem) {
      justify-content: flex-end;
    }
  }
  .lg\:gap-4 {
    @media (width >= 64rem) {
      gap: calc(var(--spacing) * 4);
    }
  }
  .lg\:space-y-0 {
    @media (width >= 64rem) {
      :where(& > :not(:last-child)) {
        --tw-space-y-reverse: 0;
        margin-block-start: calc(calc(var(--spacing) * 0) * var(--tw-space-y-reverse));
        margin-block-end: calc(calc(var(--spacing) * 0) * calc(1 - var(--tw-space-y-reverse)));
      }
    }
  }
  .lg\:gap-x-12 {
    @media (width >= 64rem) {
      column-gap: calc(var(--spacing) * 12);
    }
  }
  .lg\:space-x-6 {
    @media (width >= 64rem) {
      :where(& > :not(:last-child)) {
        --tw-space-x-reverse: 0;
        margin-inline-start: calc(calc(var(--spacing) * 6) * var(--tw-space-x-reverse));
        margin-inline-end: calc(calc(var(--spacing) * 6) * calc(1 - var(--tw-space-x-reverse)));
      }
    }
  }
  .lg\:gap-y-12 {
    @media (width >= 64rem) {
      row-gap: calc(var(--spacing) * 12);
    }
  }
  .lg\:p-8 {
    @media (width >= 64rem) {
      padding: calc(var(--spacing) * 8);
    }
  }
  .lg\:px-10 {
    @media (width >= 64rem) {
      padding-inline: calc(var(--spacing) * 10);
    }
  }
  .lg\:pb-12 {
    @media (width >= 64rem) {
      padding-bottom: calc(var(--spacing) * 12);
    }
  }
  .lg\:text-3xl {
    @media (width >= 64rem) {
      font-size: var(--text-3xl);
      line-height: var(--tw-leading, var(--text-3xl--line-height));
    }
  }
  .lg\:text-4xl {
    @media (width >= 64rem) {
      font-size: var(--text-4xl);
      line-height: var(--tw-leading, var(--text-4xl--line-height));
    }
  }
  .group-\[\.has-right-feature-block\]\:lg\:grid-cols-\[1fr_var\(--right-sidebar-width\)\] {
    &:is(:where(.group):is(.has-right-feature-block) *) {
      @media (width >= 64rem) {
        grid-template-columns: 1fr var(--right-sidebar-width);
      }
    }
  }
  .group-\[\.has-toc\]\:lg\:grid-cols-\[1fr_var\(--right-sidebar-width\)\] {
    &:is(:where(.group):is(.has-toc) *) {
      @media (width >= 64rem) {
        grid-template-columns: 1fr var(--right-sidebar-width);
      }
    }
  }
  .md\:lg\:inline {
    @media (width >= 48rem) {
      @media (width >= 64rem) {
        display: inline;
      }
    }
  }
  .xl\:block {
    @media (width >= 80rem) {
      display: block;
    }
  }
  .xl\:h-16 {
    @media (width >= 80rem) {
      height: calc(var(--spacing) * 16);
    }
  }
  .xl\:h-auto {
    @media (width >= 80rem) {
      height: auto;
    }
  }
  .xl\:w-16 {
    @media (width >= 80rem) {
      width: calc(var(--spacing) * 16);
    }
  }
  .xl\:space-x-12 {
    @media (width >= 80rem) {
      :where(& > :not(:last-child)) {
        --tw-space-x-reverse: 0;
        margin-inline-start: calc(calc(var(--spacing) * 12) * var(--tw-space-x-reverse));
        margin-inline-end: calc(calc(var(--spacing) * 12) * calc(1 - var(--tw-space-x-reverse)));
      }
    }
  }
  .xl\:text-4xl {
    @media (width >= 80rem) {
      font-size: var(--text-4xl);
      line-height: var(--tw-leading, var(--text-4xl--line-height));
    }
  }
  .dark\:\!border-primary-700 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      border-color: var(--color-primary-700) !important;
    }
  }
  .dark\:border-\[var\(--tag-dark-color\)\] {
    &:where([data-theme=dark], [data-theme=dark] *) {
      border-color: var(--tag-dark-color);
    }
  }
  .dark\:border-base-content {
    &:where([data-theme=dark], [data-theme=dark] *) {
      border-color: var(--color-base-content);
    }
  }
  .dark\:border-gray-700 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      border-color: var(--color-gray-700);
    }
  }
  .dark\:border-slate-400 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      border-color: var(--color-slate-400);
    }
  }
  .dark\:border-slate-700 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      border-color: var(--color-slate-700);
    }
  }
  .dark\:\!bg-primary-700 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      background-color: var(--color-primary-700) !important;
    }
  }
  .dark\:bg-\[var\(--header-bg-dark\)\] {
    &:where([data-theme=dark], [data-theme=dark] *) {
      background-color: var(--header-bg-dark);
    }
  }
  .dark\:bg-\[var\(--tag-dark-color\)\/20\] {
    &:where([data-theme=dark], [data-theme=dark] *) {
      background-color: var(--tag-dark-color)/20;
    }
  }
  .dark\:bg-base-100 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      background-color: var(--color-base-100);
    }
  }
  .dark\:bg-slate-600 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      background-color: var(--color-slate-600);
    }
  }
  .dark\:bg-slate-800 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      background-color: var(--color-slate-800);
    }
  }
  .dark\:fill-slate-400 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      fill: var(--color-slate-400);
    }
  }
  .dark\:text-\[var\(--header-text-dark\)\] {
    &:where([data-theme=dark], [data-theme=dark] *) {
      color: var(--header-text-dark);
    }
  }
  .dark\:text-\[var\(--tag-dark-color\)\] {
    &:where([data-theme=dark], [data-theme=dark] *) {
      color: var(--tag-dark-color);
    }
  }
  .dark\:text-base-content {
    &:where([data-theme=dark], [data-theme=dark] *) {
      color: var(--color-base-content);
    }
  }
  .dark\:text-primary-200 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      color: var(--color-primary-200);
    }
  }
  .dark\:text-slate-200 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      color: var(--color-slate-200);
    }
  }
  .dark\:text-slate-400 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      color: var(--color-slate-400);
    }
  }
  .dark\:placeholder\:text-slate-500 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      &::placeholder {
        color: var(--color-slate-500);
      }
    }
  }
  .dark\:hover\:bg-\[var\(--tag-dark-color\)\] {
    &:where([data-theme=dark], [data-theme=dark] *) {
      &:hover {
        @media (hover: hover) {
          background-color: var(--tag-dark-color);
        }
      }
    }
  }
  .dark\:hover\:bg-accent-300 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      &:hover {
        @media (hover: hover) {
          background-color: var(--color-accent-300);
        }
      }
    }
  }
  .dark\:hover\:text-base-200 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      &:hover {
        @media (hover: hover) {
          color: var(--color-base-200);
        }
      }
    }
  }
  .dark\:hover\:text-slate-50 {
    &:where([data-theme=dark], [data-theme=dark] *) {
      &:hover {
        @media (hover: hover) {
          color: var(--color-slate-50);
        }
      }
    }
  }
  .print\:hidden {
    @media print {
      display: none;
    }
  }
}
@layer components {
  .header-nav-icon-button {
    display: inline-flex;
    width: calc(var(--spacing) * 10);
    height: calc(var(--spacing) * 10);
    cursor: pointer;
    align-items: center;
    justify-content: center;
    border-radius: calc(infinity * 1px);
    padding: calc(var(--spacing) * 1);
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-base-200);
      }
    }
    &:hover {
      @media (hover: hover) {
        color: var(--color-base-content);
      }
    }
  }
}
@layer utilities {
  .flex-col-container {
    display: flex;
    height: 100%;
    flex-direction: column;
  }
}
.menu {
  :where(li > details > summary), :where(li > .menu-dropdown-toggle) {
    &:after {
      rotate: 135deg;
    }
  }
  :where(li > details[open] > summary), :where(li > .menu-dropdown-toggle) {
    &:after {
      rotate: 225deg;
    }
  }
}
.custom-menu {
  list-style: none;
  display: flex;
  width: 100%;
  flex-direction: column;
  flex-wrap: wrap;
  padding: calc(0.25rem * 2);
  --menu-active-fg: var(--color-neutral-content);
  --menu-active-bg: var(--color-neutral);
  font-size: 0.875rem;
  :where(li) {
    position: relative;
    display: flex;
    flex-shrink: 0;
    flex-direction: column;
    flex-wrap: wrap;
    align-items: stretch;
    width: 100%;
    margin-top: 5px;
  }
  [turbo-nav-tree-item]:hover {
    [turbo-nav-tree-item-target-icon] {
      color: var(--color-primary);
    }
  }
  li[active] > [turbo-nav-tree-item][active] {
    background-color: var(--color-primary);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-primary) 80%, transparent);
    }
    a {
      --tw-font-weight: var(--font-weight-bold);
      font-weight: var(--font-weight-bold);
      color: var(--color-base-100);
    }
  }
  :where(li ul) {
    position: relative;
    padding-left: calc(0.25rem * 6);
    &:before {
      position: absolute;
      inset-inline-start: calc(0.25rem * 0);
      top: calc(0.25rem * 3);
      bottom: calc(0.25rem * 3);
      left: calc(0.25rem * 4.5);
      background-color: var(--color-base-content);
      opacity: 10%;
      width: var(--border);
      content: "";
    }
  }
}
.search-highlight-block {
  b {
    color: var(--color-primary);
  }
}
#page-content.ProseMirror a {
  word-break: break-all;
  color: var(--color-primary);
}
#page-content.ProseMirror .table-container {
  max-width: 100%;
  overflow-x: auto;
}
#page-content.ProseMirror code {
  font-size: var(--text-sm);
  line-height: var(--tw-leading, var(--text-sm--line-height));
}
.no-scrollbar {
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}
[x-cloak] {
  display: none;
}
.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0;
}
[data-tippy-root] {
  max-width: calc(100vw - 10px);
}
.tippy-box {
  position: relative;
  background-color: #333;
  color: #fff;
  border-radius: 4px;
  font-size: 14px;
  line-height: 1.4;
  white-space: normal;
  outline: 0;
  transition-property: transform,visibility,opacity;
}
.tippy-box[data-placement^=top]>.tippy-arrow {
  bottom: 0;
}
.tippy-box[data-placement^=top]>.tippy-arrow:before {
  bottom: -7px;
  left: 0;
  border-width: 8px 8px 0;
  border-top-color: initial;
  transform-origin: center top;
}
.tippy-box[data-placement^=bottom]>.tippy-arrow {
  top: 0;
}
.tippy-box[data-placement^=bottom]>.tippy-arrow:before {
  top: -7px;
  left: 0;
  border-width: 0 8px 8px;
  border-bottom-color: initial;
  transform-origin: center bottom;
}
.tippy-box[data-placement^=left]>.tippy-arrow {
  right: 0;
}
.tippy-box[data-placement^=left]>.tippy-arrow:before {
  border-width: 8px 0 8px 8px;
  border-left-color: initial;
  right: -7px;
  transform-origin: center left;
}
.tippy-box[data-placement^=right]>.tippy-arrow {
  left: 0;
}
.tippy-box[data-placement^=right]>.tippy-arrow:before {
  left: -7px;
  border-width: 8px 8px 8px 0;
  border-right-color: initial;
  transform-origin: center right;
}
.tippy-box[data-inertia][data-state=visible] {
  transition-timing-function: cubic-bezier(.54,1.5,.38,1.11);
}
.tippy-arrow {
  width: 16px;
  height: 16px;
  color: #333;
}
.tippy-arrow:before {
  content: "";
  position: absolute;
  border-color: transparent;
  border-style: solid;
}
.tippy-content {
  position: relative;
  padding: 5px 9px;
  z-index: 1;
}
.tippy-box[data-placement^=top]>.tippy-svg-arrow {
  bottom: 0;
}
.tippy-box[data-placement^=top]>.tippy-svg-arrow:after,.tippy-box[data-placement^=top]>.tippy-svg-arrow>svg {
  top: 16px;
  transform: rotate(180deg);
}
.tippy-box[data-placement^=bottom]>.tippy-svg-arrow {
  top: 0;
}
.tippy-box[data-placement^=bottom]>.tippy-svg-arrow>svg {
  bottom: 16px;
}
.tippy-box[data-placement^=left]>.tippy-svg-arrow {
  right: 0;
}
.tippy-box[data-placement^=left]>.tippy-svg-arrow:after,.tippy-box[data-placement^=left]>.tippy-svg-arrow>svg {
  transform: rotate(90deg);
  top: calc(50% - 3px);
  left: 11px;
}
.tippy-box[data-placement^=right]>.tippy-svg-arrow {
  left: 0;
}
.tippy-box[data-placement^=right]>.tippy-svg-arrow:after,.tippy-box[data-placement^=right]>.tippy-svg-arrow>svg {
  transform: rotate(-90deg);
  top: calc(50% - 3px);
  right: 11px;
}
.tippy-svg-arrow {
  width: 16px;
  height: 16px;
  fill: #333;
  text-align: initial;
}
.tippy-svg-arrow,.tippy-svg-arrow>svg {
  position: absolute;
}
.tippy-box[data-animation=shift-away][data-state=hidden] {
  opacity: 0;
}
.tippy-box[data-animation=shift-away][data-state=hidden][data-placement^=top] {
  transform: translateY(10px);
}
.tippy-box[data-animation=shift-away][data-state=hidden][data-placement^=bottom] {
  transform: translateY(-10px);
}
.tippy-box[data-animation=shift-away][data-state=hidden][data-placement^=left] {
  transform: translateX(10px);
}
.tippy-box[data-animation=shift-away][data-state=hidden][data-placement^=right] {
  transform: translateX(-10px);
}
/*!
 * Viewer.js v1.11.7
 * https://fengyuanchen.github.io/viewerjs
 *
 * Copyright 2015-present Chen Fengyuan
 * Released under the MIT license
 *
 * Date: 2024-11-24T04:32:14.526Z
 */
.viewer-zoom-in::before, .viewer-zoom-out::before, .viewer-one-to-one::before, .viewer-reset::before, .viewer-prev::before, .viewer-play::before, .viewer-next::before, .viewer-rotate-left::before, .viewer-rotate-right::before, .viewer-flip-horizontal::before, .viewer-flip-vertical::before, .viewer-fullscreen::before, .viewer-fullscreen-exit::before, .viewer-close::before {
  background-image: url("data:image/svg+xml,%3Csvg xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 viewBox%3D%220 0 560 40%22%3E%3Cpath fill%3D%22%23fff%22 d%3D%22M49.6 17.9h20.2v3.9H49.6zm123.1 2 10.9-11 2.7 2.8-8.2 8.2 8.2 8.2-2.7 2.7-10.9-10.9zm94 0-10.8-11-2.7 2.8 8.1 8.2-8.1 8.2 2.7 2.7 10.8-10.9zM212 9.3l20.1 10.6L212 30.5V9.3zm161.5 4.6-7.2 6 7.2 5.9v-4h12.4v4l7.3-5.9-7.3-6v4h-12.4v-4zm40.2 12.3 5.9 7.2 5.9-7.2h-4V13.6h4l-5.9-7.3-5.9 7.3h4v12.6h-4zm35.9-16.5h6.3v2h-4.3V16h-2V9.7Zm14 0h6.2V16h-2v-4.3h-4.2v-2Zm6.2 14V30h-6.2v-2h4.2v-4.3h2Zm-14 6.3h-6.2v-6.3h2v4.4h4.3v2Zm-438 .1v-8.3H9.6v-3.9h8.2V9.7h3.9v8.2h8.1v3.9h-8.1v8.3h-3.9zM93.6 9.7h-5.8v3.9h2V30h3.8V9.7zm16.1 0h-5.8v3.9h1.9V30h3.9V9.7zm-11.9 4.1h3.9v3.9h-3.9zm0 8.2h3.9v3.9h-3.9zm244.6-11.7 7.2 5.9-7.2 6v-3.6c-5.4-.4-7.8.8-8.7 2.8-.8 1.7-1.8 4.9 2.8 8.2-6.3-2-7.5-6.9-6-11.3 1.6-4.4 8-5 11.9-4.9v-3.1Zm147.2 13.4h6.3V30h-2v-4.3h-4.3v-2zm14 6.3v-6.3h6.2v2h-4.3V30h-1.9zm6.2-14h-6.2V9.7h1.9V14h4.3v2zm-13.9 0h-6.3v-2h4.3V9.7h2V16zm33.3 12.5 8.6-8.6-8.6-8.7 1.9-1.9 8.6 8.7 8.6-8.7 1.9 1.9-8.6 8.7 8.6 8.6-1.9 2-8.6-8.7-8.6 8.7-1.9-2zM297 10.3l-7.1 5.9 7.2 6v-3.6c5.3-.4 7.7.8 8.7 2.8.8 1.7 1.7 4.9-2.9 8.2 6.3-2 7.5-6.9 6-11.3-1.6-4.4-7.9-5-11.8-4.9v-3.1Zm-157.3-.6c2.3 0 4.4.7 6 2l2.5-3 1.9 9.2h-9.3l2.6-3.1a6.2 6.2 0 0 0-9.9 5.1c0 3.4 2.8 6.3 6.2 6.3 2.8 0 5.1-1.9 6-4.4h4c-1 4.7-5 8.3-10 8.3a10 10 0 0 1-10-10.2 10 10 0 0 1 10-10.2Z%22%2F%3E%3C%2Fsvg%3E");
  background-repeat: no-repeat;
  background-size: 280px;
  color: transparent;
  display: block;
  font-size: 0;
  height: 20px;
  line-height: 0;
  width: 20px;
}
.viewer-zoom-in::before {
  background-position: 0 0;
  content: 'Zoom In';
}
.viewer-zoom-out::before {
  background-position: -20px 0;
  content: 'Zoom Out';
}
.viewer-one-to-one::before {
  background-position: -40px 0;
  content: 'One to One';
}
.viewer-reset::before {
  background-position: -60px 0;
  content: 'Reset';
}
.viewer-prev::before {
  background-position: -80px 0;
  content: 'Previous';
}
.viewer-play::before {
  background-position: -100px 0;
  content: 'Play';
}
.viewer-next::before {
  background-position: -120px 0;
  content: 'Next';
}
.viewer-rotate-left::before {
  background-position: -140px 0;
  content: 'Rotate Left';
}
.viewer-rotate-right::before {
  background-position: -160px 0;
  content: 'Rotate Right';
}
.viewer-flip-horizontal::before {
  background-position: -180px 0;
  content: 'Flip Horizontal';
}
.viewer-flip-vertical::before {
  background-position: -200px 0;
  content: 'Flip Vertical';
}
.viewer-fullscreen::before {
  background-position: -220px 0;
  content: 'Enter Full Screen';
}
.viewer-fullscreen-exit::before {
  background-position: -240px 0;
  content: 'Exit Full Screen';
}
.viewer-close::before {
  background-position: -260px 0;
  content: 'Close';
}
.viewer-container {
  bottom: 0;
  direction: ltr;
  font-size: 0;
  left: 0;
  line-height: 0;
  overflow: hidden;
  position: absolute;
  right: 0;
  -webkit-tap-highlight-color: transparent;
  top: 0;
  -ms-touch-action: none;
  touch-action: none;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
.viewer-container::-moz-selection, .viewer-container *::-moz-selection {
  background-color: transparent;
}
.viewer-container::selection, .viewer-container *::selection {
  background-color: transparent;
}
.viewer-container:focus {
  outline: 0;
}
.viewer-container img {
  display: block;
  height: auto;
  max-height: none !important;
  max-width: none !important;
  min-height: 0 !important;
  min-width: 0 !important;
  width: 100%;
}
.viewer-canvas {
  bottom: 0;
  left: 0;
  overflow: hidden;
  position: absolute;
  right: 0;
  top: 0;
}
.viewer-canvas > img {
  height: auto;
  margin: 15px auto;
  max-width: 90% !important;
  width: auto;
}
.viewer-footer {
  bottom: 0;
  left: 0;
  overflow: hidden;
  position: absolute;
  right: 0;
  text-align: center;
}
.viewer-navbar {
  background-color: rgba(0, 0, 0, 0.5);
  overflow: hidden;
}
.viewer-list {
  box-sizing: content-box;
  height: 50px;
  margin: 0;
  overflow: hidden;
  padding: 1px 0;
}
.viewer-list > li {
  color: transparent;
  cursor: pointer;
  float: left;
  font-size: 0;
  height: 50px;
  line-height: 0;
  opacity: 0.5;
  overflow: hidden;
  transition: opacity 0.15s;
  width: 30px;
}
.viewer-list > li:focus, .viewer-list > li:hover {
  opacity: 0.75;
}
.viewer-list > li:focus {
  outline: 0;
}
.viewer-list > li + li {
  margin-left: 1px;
}
.viewer-list > .viewer-loading {
  position: relative;
}
.viewer-list > .viewer-loading::after {
  border-width: 2px;
  height: 20px;
  margin-left: -10px;
  margin-top: -10px;
  width: 20px;
}
.viewer-list > .viewer-active, .viewer-list > .viewer-active:focus, .viewer-list > .viewer-active:hover {
  opacity: 1;
}
.viewer-player {
  background-color: #000;
  bottom: 0;
  cursor: none;
  display: none;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 1;
}
.viewer-player > img {
  left: 0;
  position: absolute;
  top: 0;
}
.viewer-toolbar > ul {
  display: inline-block;
  margin: 0 auto 5px;
  overflow: hidden;
  padding: 6px 3px;
}
.viewer-toolbar > ul > li {
  background-color: rgba(0, 0, 0, 0.5);
  border-radius: 50%;
  cursor: pointer;
  float: left;
  height: 24px;
  overflow: hidden;
  transition: background-color 0.15s;
  width: 24px;
}
.viewer-toolbar > ul > li:focus, .viewer-toolbar > ul > li:hover {
  background-color: rgba(0, 0, 0, 0.8);
}
.viewer-toolbar > ul > li:focus {
  box-shadow: 0 0 3px #fff;
  outline: 0;
  position: relative;
  z-index: 1;
}
.viewer-toolbar > ul > li::before {
  margin: 2px;
}
.viewer-toolbar > ul > li + li {
  margin-left: 1px;
}
.viewer-toolbar > ul > .viewer-small {
  height: 18px;
  margin-bottom: 3px;
  margin-top: 3px;
  width: 18px;
}
.viewer-toolbar > ul > .viewer-small::before {
  margin: -1px;
}
.viewer-toolbar > ul > .viewer-large {
  height: 30px;
  margin-bottom: -3px;
  margin-top: -3px;
  width: 30px;
}
.viewer-toolbar > ul > .viewer-large::before {
  margin: 5px;
}
.viewer-tooltip {
  background-color: rgba(0, 0, 0, 0.8);
  border-radius: 10px;
  color: #fff;
  display: none;
  font-size: 12px;
  height: 20px;
  left: 50%;
  line-height: 20px;
  margin-left: -25px;
  margin-top: -10px;
  position: absolute;
  text-align: center;
  top: 50%;
  width: 50px;
}
.viewer-title {
  color: #ccc;
  display: inline-block;
  font-size: 12px;
  line-height: 1.2;
  margin: 5px 5%;
  max-width: 90%;
  min-height: 14px;
  opacity: 0.8;
  overflow: hidden;
  text-overflow: ellipsis;
  transition: opacity 0.15s;
  white-space: nowrap;
}
.viewer-title:hover {
  opacity: 1;
}
.viewer-button {
  -webkit-app-region: no-drag;
  background-color: rgba(0, 0, 0, 0.5);
  border-radius: 50%;
  cursor: pointer;
  height: 80px;
  overflow: hidden;
  position: absolute;
  right: -40px;
  top: -40px;
  transition: background-color 0.15s;
  width: 80px;
}
.viewer-button:focus, .viewer-button:hover {
  background-color: rgba(0, 0, 0, 0.8);
}
.viewer-button:focus {
  box-shadow: 0 0 3px #fff;
  outline: 0;
}
.viewer-button::before {
  bottom: 15px;
  left: 15px;
  position: absolute;
}
.viewer-fixed {
  position: fixed;
}
.viewer-open {
  overflow: hidden;
}
.viewer-show {
  display: block;
}
.viewer-hide {
  display: none;
}
.viewer-backdrop {
  background-color: rgba(0, 0, 0, 0.5);
}
.viewer-invisible {
  visibility: hidden;
}
.viewer-move {
  cursor: move;
  cursor: grab;
}
.viewer-fade {
  opacity: 0;
}
.viewer-in {
  opacity: 1;
}
.viewer-transition {
  transition: all 0.3s;
}
@keyframes viewer-spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
.viewer-loading::after {
  animation: viewer-spinner 1s linear infinite;
  border: 4px solid rgba(255, 255, 255, 0.1);
  border-left-color: rgba(255, 255, 255, 0.5);
  border-radius: 50%;
  content: '';
  display: inline-block;
  height: 40px;
  left: 50%;
  margin-left: -20px;
  margin-top: -20px;
  position: absolute;
  top: 50%;
  width: 40px;
  z-index: 1;
}
@media (max-width: 767px) {
  .viewer-hide-xs-down {
    display: none;
  }
}
@media (max-width: 991px) {
  .viewer-hide-sm-down {
    display: none;
  }
}
@media (max-width: 1199px) {
  .viewer-hide-md-down {
    display: none;
  }
}
.ProseMirror {
  [bke-role="column"] {
    &:where([data-theme=dark], [data-theme=dark] *) {
      background-color: var(--color-base-300);
    }
  }
}
.turbo-frame-loading-container {
  position: absolute;
  cursor: wait;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: transparent;
  border-radius: 0.5rem;
  z-index: 9999;
  .loading-spinner {
    position: absolute;
    top: calc(1/2 * 100%);
    left: calc(1/2 * 100%);
    display: flex;
    --tw-translate-x: calc(calc(1/2 * 100%) * -1);
    --tw-translate-y: calc(calc(1/2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
    font-family: remixicon;
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
    color: var(--color-primary);
    font-style: normal;
    &::after {
      content: var(--tw-content);
      animation: var(--animate-spin);
    }
    &::after {
      --tw-content: '\eec9';
      content: var(--tw-content);
    }
  }
}
a {
  text-wrap: wrap;
  word-break: break-all;
}
a:hover {
  text-decoration-line: underline;
  text-underline-offset: 2px;
}
.page--article__link {
  border-bottom: 1px solid rgb(240, 240, 240);
}
:is(.dark .page--article__link) {
  border-bottom: 1px solid #374151;
}
.page--article__link:hover {
  text-decoration: none !important;
}
.page--article__link::after {
  position: absolute;
  content: '';
  transition: 0.3s;
  width: 0;
  left: 50%;
  bottom: -0.5px;
  height: 1px;
  background: rgb(var(--theme-color-primary));
}
.page--article__link:hover::after {
  width: 100%;
  left: 0;
}
.breadcrumb {
  display: flex;
  flex-wrap: wrap;
  padding: 0.5rem 0;
  margin-bottom: 0;
  list-style: none;
}
.breadcrumb-item {
  font-size: 0.8rem;
  color: rgb(158, 158, 158);
}
.breadcrumb-item + .breadcrumb-item {
  padding-left: 0.25rem;
}
.breadcrumb-item + .breadcrumb-item::before {
  display: inline-block;
  padding-right: 0.25rem;
  color: #6c757d;
  content: "/";
}
.breadcrumb-item + .breadcrumb-item:hover::before {
  text-decoration: underline;
}
.breadcrumb-item + .breadcrumb-item:hover::before {
  text-decoration: none;
}
.scrollbar-hide::-webkit-scrollbar, .scrollbar-hide::-webkit-scrollbar-thumb {
  display: none;
}
#page-tree li.active {
  text-shadow: 0 0 rgba(0, 0, 0, 0);
}
#page-tree::-webkit-scrollbar, #page-tree::-webkit-scrollbar-thumb {
  display: none;
}
#page-tree::-webkit-scrollbar {
  display: none;
}
#page-tree::-webkit-scrollbar-thumb {
  display: none;
}
.page-tree--node {
  padding: 0.25rem 0;
}
.page-tree--node > a {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}
.page-tree--node.article > a {
  padding-left: 1.5rem;
}
.active > a.current {
  font-weight: 600;
  color: hsl(var(--theme-color-primary));
}
.page-tree--node.active > a > .page-tree--nav__article_point {
  display: flex;
}
.search-highlight-block b {
  color: hsl(var(--theme-color-primary));
}
.sl-prose p:nth-child(n+5) {
  display: none;
}
.ElementsTableOfContentsItem svg[data-icon=bullseye] {
  display: none;
}
body {
  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
}
@media (min-width: 640px) {
  .sl-elements-api > div:nth-child(1) {
    margin-left: 3rem;
    margin-top: 0.75rem;
    margin-bottom: 0.75rem;
  }
  .sl-elements-api > div:nth-child(2) {
    padding-left: 4rem;
    padding-right: 3.25rem;
  }
  .sl-elements-api > div:nth-child(1) .sl-bg-canvas-100 {
    background-color: #ffffff;
  }
}
.sl-drawer {
  z-index: 30;
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
    @supports (color: color-mix(in lab, red, red)) {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked ) {
    overflow: hidden;
  }
}
@layer base {
  :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
    --root-bg: var(--color-base-100);
    @supports (color: color-mix(in lab, red, red)) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }
  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
    scrollbar-gutter: stable;
  }
  @supports (width: if(else: 1px)) and (animation-timeline: scroll()) {
    :root {
      animation: set-page-has-scroll forwards;
      animation-timeline: scroll();
    }
    @keyframes set-page-has-scroll {
      0%, to {
        --page-has-scroll: 1;
      }
    }
    :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
      scrollbar-gutter: if(style(--page-has-scroll: 1): stable; else: unset);
    }
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme="light"] {
    color-scheme: normal;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: hsl(var(--theme-color-primary));
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: hsl(var(--theme-color-secondary));
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: hsl(var(--theme-color-accent));
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: hsl(var(--theme-color-info));
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: hsl(var(--theme-color-success));
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: hsl(var(--theme-color-warning));
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme="dark"] {
    color-scheme: normal;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: hsl(var(--theme-color-primary));
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: hsl(var(--theme-color-secondary));
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: hsl(var(--theme-color-accent));
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: hsl(var(--theme-color-info));
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: hsl(var(--theme-color-success));
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: hsl(var(--theme-color-warning));
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-pan-x {
  syntax: "*";
  inherits: false;
}
@property --tw-pan-y {
  syntax: "*";
  inherits: false;
}
@property --tw-pinch-zoom {
  syntax: "*";
  inherits: false;
}
@property --tw-scroll-snap-strictness {
  syntax: "*";
  inherits: false;
  initial-value: proximity;
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-space-x-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-divide-x-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-divide-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-gradient-position {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-via {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-to {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-via-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 0%;
}
@property --tw-gradient-via-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 50%;
}
@property --tw-gradient-to-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-leading {
  syntax: "*";
  inherits: false;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-tracking {
  syntax: "*";
  inherits: false;
}
@property --tw-ordinal {
  syntax: "*";
  inherits: false;
}
@property --tw-slashed-zero {
  syntax: "*";
  inherits: false;
}
@property --tw-numeric-figure {
  syntax: "*";
  inherits: false;
}
@property --tw-numeric-spacing {
  syntax: "*";
  inherits: false;
}
@property --tw-numeric-fraction {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@property --tw-ease {
  syntax: "*";
  inherits: false;
}
@property --tw-content {
  syntax: "*";
  initial-value: "";
  inherits: false;
}
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-translate-z: 0;
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-pan-x: initial;
      --tw-pan-y: initial;
      --tw-pinch-zoom: initial;
      --tw-scroll-snap-strictness: proximity;
      --tw-space-y-reverse: 0;
      --tw-space-x-reverse: 0;
      --tw-divide-x-reverse: 0;
      --tw-border-style: solid;
      --tw-divide-y-reverse: 0;
      --tw-gradient-position: initial;
      --tw-gradient-from: #0000;
      --tw-gradient-via: #0000;
      --tw-gradient-to: #0000;
      --tw-gradient-stops: initial;
      --tw-gradient-via-stops: initial;
      --tw-gradient-from-position: 0%;
      --tw-gradient-via-position: 50%;
      --tw-gradient-to-position: 100%;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-ordinal: initial;
      --tw-slashed-zero: initial;
      --tw-numeric-figure: initial;
      --tw-numeric-spacing: initial;
      --tw-numeric-fraction: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-backdrop-blur: initial;
      --tw-backdrop-brightness: initial;
      --tw-backdrop-contrast: initial;
      --tw-backdrop-grayscale: initial;
      --tw-backdrop-hue-rotate: initial;
      --tw-backdrop-invert: initial;
      --tw-backdrop-opacity: initial;
      --tw-backdrop-saturate: initial;
      --tw-backdrop-sepia: initial;
      --tw-duration: initial;
      --tw-ease: initial;
      --tw-content: "";
    }
  }
}
